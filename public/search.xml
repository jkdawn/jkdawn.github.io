<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>linux使用systemd方式添加开机自动执行脚本</title>
      <link href="/2019/06/26/linux%E4%BD%BF%E7%94%A8systemd%E6%96%B9%E5%BC%8F%E6%B7%BB%E5%8A%A0%E5%BC%80%E6%9C%BA%E8%87%AA%E5%8A%A8%E6%89%A7%E8%A1%8C%E8%84%9A%E6%9C%AC/"/>
      <url>/2019/06/26/linux%E4%BD%BF%E7%94%A8systemd%E6%96%B9%E5%BC%8F%E6%B7%BB%E5%8A%A0%E5%BC%80%E6%9C%BA%E8%87%AA%E5%8A%A8%E6%89%A7%E8%A1%8C%E8%84%9A%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<blockquote><p>前段时间在一台公网服务器上搭建了vpn服务用来映射内网一台gitlab服务器,实现跨网络也能进行代码提交等操作.过程中经过查找网络上的博客文档基本都没啥问题,但是后续使用过程中,发现客户端(pptp-linux)vpn连接会自动断开(大约是晚上的时候),后面写了一个脚本后台常驻,检测vpn是否连接,如果断开则自动重连.但是问题来了,如果服务器关机了然后开机,则不会自动去连接,需要手工执行连接的脚本.于是,查找相关的systemd方式实现开机启动执行相关脚本.由于内网服务器默认登录的账户不是root身份,所以使用其他小伙伴的建立/etc/rc.local文件的方式是未成功.以下是测试能够通过的方式(我的内网gitlab服务器是Ubuntu18.04.1-server版,理论上只要使用systemd的方式来管理系统服务启动的发行版都可以)</p></blockquote><h3 id="准备好要执行的脚本文件-auto-conn-sh"><a href="#准备好要执行的脚本文件-auto-conn-sh" class="headerlink" title="准备好要执行的脚本文件(auto_conn.sh)"></a>准备好要执行的脚本文件(auto_conn.sh)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#! /bin/sh</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">true</span></span><br><span class="line">pppdNum=`ifconfig | grep ppp0 | wc -l`</span><br><span class="line"><span class="keyword">do</span> <span class="built_in">echo</span> <span class="string">"pppdNum = <span class="variable">$pppdNum</span>"</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$pppdNum</span> -le 0 ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">      <span class="comment"># </span></span><br><span class="line">      <span class="built_in">echo</span> <span class="string">"vpn is down,waitting for connectting again..."</span></span><br><span class="line">      sleep 10</span><br><span class="line">      pppdNum_1=`ifconfig | grep ppp0 | wc -l`</span><br><span class="line">      <span class="built_in">echo</span> <span class="string">"pppdNum = <span class="variable">$pppdNum_1</span>"</span></span><br><span class="line">      <span class="comment">#</span></span><br><span class="line">      <span class="keyword">if</span> [ <span class="variable">$pppdNum_1</span> -ge 1 ]</span><br><span class="line">      <span class="keyword">then</span></span><br><span class="line">          <span class="built_in">echo</span> <span class="string">"vpn has autolly connect success again!"</span></span><br><span class="line">          <span class="comment"># xxxxx是sudo执行的密码,每次连接后需要手工添加路由表,不然不能访问到服务器,ppp0是该网卡的名称.可通过ifconfig查看192.168.2.0/24是自己外网vpn服务器给内部电脑分配的内网ip网关前缀</span></span><br><span class="line">          <span class="built_in">echo</span> <span class="string">'xxxxx'</span> | sudo -S route add -net 192.168.2.0/24 ppp0</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">          <span class="built_in">echo</span> <span class="string">"connectting.."</span></span><br><span class="line">          <span class="comment"># xxxxx是sudo执行的密码,vpn_name是自定义vpn连接的名称,000.000.000.000是vpn服务器的ip(公网ip),username是vpn登录的用户名,passwd是vpn登录的密码</span></span><br><span class="line">          <span class="built_in">echo</span> <span class="string">'xxxxxx'</span> | sudo -S pptpsetup --create vpn_name --server 000.000.000.000 --username username --password passwd vpn-only --encrypt --start</span><br><span class="line">          <span class="built_in">echo</span> <span class="string">'c vpn_client'</span> &gt; /var/run/xl2tpd/l2tp-control</span><br><span class="line">              sleep 10</span><br><span class="line">          <span class="comment"># xxxxx是sudo执行的密码,每次连接后需要手工添加路由表,不然不能访问到服务器,ppp0是该网卡的名称.可通过ifconfig查看192.168.2.0/24是自己外网vpn服务器给内部电脑分配的内网ip网关前缀</span></span><br><span class="line">          <span class="built_in">echo</span> <span class="string">'xxxxxx'</span> | sudo -S route add -net 192.168.2.0/24 ppp0</span><br><span class="line">      <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">sleep 5</span><br><span class="line"></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><pre><code>注: 某条命令需要sudo执行的话,在脚本中可使用echo &apos;xxxxxx&apos; | sudo -S 的方式,xxxxxx就是对应的密码</code></pre><p>然后给脚本添加执行权限.sudo chmod +x</p><h3 id="创建一个service文件"><a href="#创建一个service文件" class="headerlink" title="创建一个service文件"></a>创建一个service文件</h3><p><code>sudo vim /etc/systemd/system/auto_startVPN.service</code></p><p>详细内容如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=自动连接vpn <span class="comment">#自定义的简介描述</span></span><br><span class="line">After=network-online.target.wants <span class="comment">#脚本所需要的前置service，可在/etc/systemd/system/下查看</span></span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">ExecStart=/home/xxx/xxx/auto_conn.sh <span class="comment">#第一步中的脚本文件路径</span></span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>service文件一般正常的启动文件主要分成三部分</p><p>[Unit] 段: 启动顺序与依赖关系</p><p>[Service] 段: 启动行为,如何启动，启动类型</p><p>[Install] 段: 定义如何安装这个配置文件，即怎样做到开机启动</p><h3 id="使用systemctl命令使能这个服务开机启动"><a href="#使用systemctl命令使能这个服务开机启动" class="headerlink" title="使用systemctl命令使能这个服务开机启动"></a>使用systemctl命令使能这个服务开机启动</h3><p><code>sudo systemctl daemon-reload</code> //重新加载配置文件</p><p><code>sudo systemctl enable auto_startVPN.service</code> //设置开机启动刚刚新建的自动连接vpn的服务</p><p>重启电脑,等待个大约10多秒,执行ifconfig,会发现连接中会有ppp0这个网卡设备和对应的ip地址等信息,说明脚本执行成功也成功的自动连接上了vpn服务器.</p>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编译安装nginx添加rtmp模块</title>
      <link href="/2019/06/01/%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85nginx%E6%B7%BB%E5%8A%A0rtmp%E6%A8%A1%E5%9D%97/"/>
      <url>/2019/06/01/%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85nginx%E6%B7%BB%E5%8A%A0rtmp%E6%A8%A1%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<pre><code>摘要:nginx源码编译添加rtmp模块实现视频推流服务器环境:deepin linux 15.10.1(基于debian9)</code></pre><h3 id="安装依赖库"><a href="#安装依赖库" class="headerlink" title="安装依赖库"></a>安装依赖库</h3><p>执行命令前,最好执行一次sudo apt update更新下仓库</p><p><code>sudo apt install autoconf automake</code></p><p><code>sudo apt install libpcre3 libpcre3-dev</code></p><p><code>sudo apt install openssl</code></p><p><code>sudo apt install libssl-dev</code></p><h3 id="下载nginx和nginx-rtmp-module源码"><a href="#下载nginx和nginx-rtmp-module源码" class="headerlink" title="下载nginx和nginx-rtmp-module源码"></a>下载nginx和nginx-rtmp-module源码</h3><p>进入到一个目录(可以自己新建),然后clone nginx和rtmp模块的源码,地址可在github上面查找对应的仓库,然后进行clone操作(需要安装git)</p><p><code>git clone https://github.com/nginx/nginx.git --depth=1</code> // clone nginx源码,指定克隆深度depth为1即表示只克隆最近一次commit(clone时间大幅缩短)</p><p><code>git clone https://github.com/arut/nginx-rtmp-module.git --depth=1</code> // clone nginx-rtmp-module源码</p><p>进入到nginx源码目录,有一个auto文件夹，里面有一个名为configure的文件.通过命令参数调用该文件,生成MakeFile</p><p><code>cd nginx</code> // 进入到nginx源码目录</p><p><code>./auto/configure --prefix=/opt/nginx --with-http_ssl_module --with-http_v2_module --with-http_flv_module --with-http_mp4_module --add-module=../nginx-rtmp-module/</code></p><p><code>ls -al</code> // 查看当前目录(nginx)下的文件,会有一个产生的MakeFile文件</p><h3 id="编译和安装"><a href="#编译和安装" class="headerlink" title="编译和安装"></a>编译和安装</h3><p>当前目录还是位于上一步的nginx目录</p><p><code>make</code> // 编译</p><p><code>sudo make install</code> // 安装</p><h3 id="查看结果"><a href="#查看结果" class="headerlink" title="查看结果"></a>查看结果</h3><p><code>ls -l /opt/nginx/</code> // 查看opt目录下nginx目录的内容</p><p><code>sudo /opt/nginx/sbin/nginx</code> // 启动nginx服务,默认只能用root启动,所以加sudo</p><p><code>sudo chmod u+s /opt/nginx/sbin/nginx</code> // 为nginx文件加上setuid标志.(setuid只对文件有效).设置后可以通过普通用户就可以启动</p><ul><li><p>关于chmod扩展:如果是一个可执行文件, 那么在执行时, 一般该文件只拥有调用该文件的用户具有的权限. 而setuid, setgid 可以来改变这种设置:</p><p>setuid: 设置使文件在执行阶段具有文件所有者的权限</p><p>setgid: 该权限只对目录有效. 目录被设置该位后, 任何用户在此目录下创建的文件都具有和该目录所属的组相同的组.</p><p>sticky bit: 该位可以理解为防删除位. 一个文件是否可以被某用户删除, 主要取决于该文件所属的组是否对该用户具有写权限. 如果没有写权限, 则这个目录下的所有文件都不能被删除, 同时也不能添加新的文件. 如果希望用户能够添加文件但同时不能删除文件, 则可以对文件使用sticky bit位. 设置该位后, 就算用户对目录具有写权限, 也不能删除该文件,该权限只对目录有效.</p><p>具体使用如下</p><p>chmod u+s temp — 为temp文件加上setuid标志. (setuid 只对文件有效)</p><p>chmod g+s tempdir — 为tempdir目录加上setgid标志 (setgid 只对目录有效)</p><p>chmod o+t temp — 为temp文件加上sticky标志 (sticky只对文件有效) *</p></li></ul><p>浏览器打开localhost,正常就能打开nginx默认的首页面</p><h3 id="nginx-推流配置"><a href="#nginx-推流配置" class="headerlink" title="nginx 推流配置"></a>nginx 推流配置</h3><p><code>sudo vim /opt/nginx/conf/nginx.conf</code></p><pre><code>rtmp {  server {      listen 1935;      application rtmplive_demo {          live on;          max_connections 1024;      }      application hlsvideo {          live on;          hls on;          hls_path /home/bz/Desktop/video/hlsvideo; # 推流存放文件夹,自定义          hls_fragment 1s;      }  }}location ^~ /hlsvideo {  types {    application/vnd.apple.mpegurl    m3u8;    video/mp2t ts;  }  root /home/bz/Desktop/video; # 此处不能写/home/bz/Desktop/video/hlsvideo,因为路径中带了一层hlsvideo了,如果写上hlsvideo会导致读取m3u8文件404  add_header Cache-Control    no-cache;}</code></pre><p><code>sudo /opt/nginx/sbin/nginx -t</code> // 测试配置文件是否ok</p><p><code>sudo /opt/nginx/sbin/nginx -s reload</code></p><h4 id="测试rtmp推流"><a href="#测试rtmp推流" class="headerlink" title="测试rtmp推流"></a>测试rtmp推流</h4><p><code>ffmpeg -re -i ./龙珠超.布罗利.mp4 -vcodec libx264 -vprofile baseline -acodec aac -ar 44100 -strict -2 -ac 1 -f flv -s 1280x720 -q 10 rtmp://192.168.100.31:1935/rtmplive_demo/longzhuchao</code></p><pre><code>注:rtmp://192.168.100.31:1935/rtmplive_demo/longzhuchao rtmp流地址,其中rtmplive_demo必须和nginx.conf中application中的rtmplive_demo名称必须一致,否则导致推流不成功</code></pre><p>打开VLC Media Player测试</p><p>在工具栏”媒体-&gt;打开网络串流”然后输入rtmp://192.168.100.31:1935/rtmplive_demo/longzhuchao点击确定即可进行直播预览转换后的rtmp视频流.效果如图</p><p><img src="/images/push_rtmp_res.png" alt=""></p><h4 id="测试HLS推流"><a href="#测试HLS推流" class="headerlink" title="测试HLS推流"></a>测试HLS推流</h4><p><code>ffmpeg -re -i ./龙珠超.布罗利.mp4 -vcodec libx264 -vprofile baseline -acodec aac -ar 44100 -strict -2 -ac 1 -f flv -s 1280x720 -q 10 rtmp://192.168.100.31:1935/hlsvideo/longzhuchao</code></p><pre><code>注:rtmp://192.168.100.31:1935/hlsvideo/longzhuchao,其中hlsvideo必须和nginx.conf中application中hlsvideo名称必须一致,否则导致推流不成功</code></pre><p>打开VLC Media Player测试</p><p>HLS测试地址是http协议的.访问路径是nginx中http节点下server节点配置的.此处是<a href="http://192.168.100.31/hlsvideo/longzhuchao.m3u8" target="_blank" rel="noopener">http://192.168.100.31/hlsvideo/longzhuchao.m3u8</a></p><p>在工具栏”媒体-&gt;打开网络串流”然后输入<a href="http://192.168.100.31/hlsvideo/longzhuchao.m3u8点击确定即可进行直播预览转换后的rtmp视频流.效果如图" target="_blank" rel="noopener">http://192.168.100.31/hlsvideo/longzhuchao.m3u8点击确定即可进行直播预览转换后的rtmp视频流.效果如图</a></p><p><img src="/images/m3u8-res.png" alt=""></p>]]></content>
      
      
      
        <tags>
            
            <tag> nginx </tag>
            
            <tag> rtmp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx-rtmp-module-ffmpeg视频推流和rtsp转rtmp及hls</title>
      <link href="/2019/05/31/nginx-rtmp-module-ffmpeg%E8%A7%86%E9%A2%91%E6%8E%A8%E6%B5%81%E5%92%8Crtsp%E8%BD%ACrtmp%E5%8F%8Ahls/"/>
      <url>/2019/05/31/nginx-rtmp-module-ffmpeg%E8%A7%86%E9%A2%91%E6%8E%A8%E6%B5%81%E5%92%8Crtsp%E8%BD%ACrtmp%E5%8F%8Ahls/</url>
      
        <content type="html"><![CDATA[<h3 id="RTSP、RTMP、HTTP协议比较"><a href="#RTSP、RTMP、HTTP协议比较" class="headerlink" title="RTSP、RTMP、HTTP协议比较"></a>RTSP、RTMP、HTTP协议比较</h3><h4 id="共同点"><a href="#共同点" class="headerlink" title="共同点"></a>共同点</h4><p>1.都是用在应用层的协议</p><p>2.理论上这三种协议都可以做直播和点播，但直播一般用RTSP和RTMP点播用HTTP</p><h4 id="不同点"><a href="#不同点" class="headerlink" title="不同点"></a>不同点</h4><p>1.HTTP协议（HyperText Transfer Protocol，超文本传输协议)，是因特网上应用最为广泛的一种网络传输协议，所有的WWW文件都必须遵守这个标准,HTTP是一个基于TCP/IP通信协议来传递数据(HTML 文件, 图片文件, 查询结果等).所以HTTP不是流媒体协议，RTMP和RTSP是流媒体协议</p><p>2.RTMP是Real Time Messaging Protocol（实时消息传输协议）的首字母缩写。该协议基于TCP，是一个协议族，包括RTMP基本协议及RTMPT/RTMPS/RTMPE等多种变种。RTMP是一种设计用来进行实时数据通信的网络协议，主要用来在Flash/AIR平台和支持RTMP协议的流媒体/交互服务器之间进行音视频和数据通信,RTMP一般传输flv,f4v格式流.</p><p>3.RTSP（Real Time Streaming Protocol），RFC2326，实时流传输协议.RTSP以客户端方式工作，对流媒体提供播放、暂停、后退、前进等操作.RTSP传输的一般是TS、MP4格式的流，其传输一般需要2~3个通道，命令和数据通道分离。使用RTSP协议传输流媒体数据需要有专门的媒体播放器和媒体服务器，也就是需要支持RTSP协议的客户端和服务器。</p><h3 id="ffmpeg简介"><a href="#ffmpeg简介" class="headerlink" title="ffmpeg简介"></a>ffmpeg简介</h3><p>FFmpeg是一套可以用来记录、转换数字音频、视频，并能将其转化为流的开源计算机程序。它包括了目前领先的音/视频编码库libavcodec.可以轻易地实现多种视频格式之间的相互转换，例如可以将摄录下的视频avi等转成现在视频网站所采用的flv格式</p><h3 id="nginx-nginx-rtmp-moudle安装"><a href="#nginx-nginx-rtmp-moudle安装" class="headerlink" title="nginx+nginx-rtmp-moudle安装"></a>nginx+nginx-rtmp-moudle安装</h3><p>分别下载nginx和nginx-rtmp的源码然后进行编译即可.在此,为了方便我是直接使用的docker的tiangolo/nginx-rtmp镜像,docker安装参考上一篇初识docker文档</p><p><code>docker pull tiangolo/nginx-rtmp</code> // 拉取nginx-rtmp镜像</p><p><code>docker run -it --name nginx-rtmp tiangolo/nginx-rtmp -p 1935:1935</code> // 第一次运行容器,取个别名,后续可直接使用 <code>docker start nginx-rtmp</code></p><p>使用<code>netstat -tunlp | grep 1935</code> 检测1935端口是否正在监听,正常情况是正在监听中</p><h3 id="ffmpeg安装"><a href="#ffmpeg安装" class="headerlink" title="ffmpeg安装"></a>ffmpeg安装</h3><p><code>sudo apt install ffmpeg</code> // 安装ffmpeg(我当前环境deepin,仓库里面自带ffmpeg包)</p><p>其他操作系统需要去官网下载对应的安装包即可或者按照官方文档添加对应系统的ppa进行安装即可.</p><p>ffmpeg参数:</p><p>-re : 表示使用文件的原始帧率进行读取，因为ffmpeg读取视频帧的速度很快，如果不使用这个参数，ffmpeg可以在很短时间就把video.mp4中的视频帧全部读取完并进行推流，这样就无法体现出视频播放的效果了</p><p>-i :这个参数表示输入 ，后面跟的路劲文件就是输入文件。</p><p>-vcodec copy : -vcodec表示使用的视频编解码器 ，前缀v表示video。后面紧跟的copy 表示复制使用源文件的视频编解码器，比如原文件的编解码器(codec)是h264，则这里就使用h264</p><p>-acodec copy : -acodec表示使用的音频编解码器，前缀a表示audio。后面的copy 表示使用源文件的音频编解码器</p><p>-b:v 800k : -b:v表示视频的比特率(bitrate) ，为800k</p><p>-b:a 32k : 表示音频的比特率为32k</p><p>-f flv : -f表示format ，就是强制输出格式为flv，这一步其实也叫封装(mux)，封装要做的事就是把视频和音频混合在一起，进行同步。紧跟在后面的rtmp://xxx.xxx.xxx/xxx 表示输出的”文件名”，这个文件名可以是一个本地的文件，也可以指定为rtmp流媒体地址。指定为rtmp流媒体地址后，则ffmpeg就可以进行推流</p><h3 id="ffmpeg将rtsp转码为rtmp"><a href="#ffmpeg将rtsp转码为rtmp" class="headerlink" title="ffmpeg将rtsp转码为rtmp"></a>ffmpeg将rtsp转码为rtmp</h3><p>使用ffmpeg命令,将rtsp转码为rtmp.ffmpeg参数项很多,未对其深究,直接参考网友的命令的.-i后面是rtsp流地址.</p><p><code>ffmpeg -re -rtsp_transport tcp -i &quot;rtsp://184.72.239.149/vod/mp4://BigBuckBunny_175k.mov&quot; -f flv -vcodec libx264 -vprofile baseline -acodec aac -ar 44100 -strict -2 -ac 1 -f flv -r 10 -s 1280x720 -q 10 &quot;rtmp://127.0.0.1:1935/live/demo&quot;</code></p><pre><code>在执行转码命令过程中,可能会报信息类似 Past duration 0.999992 too large 的警告错误,经查询资料,是在-r参数后面指定的视频帧率参数导致的.rtsp://184.72.239.149/vod/mp4://BigBuckBunny_175k.mov这个地址是网络上的地址,可使用vlc media player查看源的帧率而设置</code></pre><h4 id="使用VLC-media-player测试播放转换后的rtmp地址"><a href="#使用VLC-media-player测试播放转换后的rtmp地址" class="headerlink" title="使用VLC media player测试播放转换后的rtmp地址"></a>使用VLC media player测试播放转换后的rtmp地址</h4><p>打开VLC media player播放器.在工具栏”媒体-&gt;打开网络串流”然后输入rtmp://127.0.0.1:1935/live/demo点击确定即可进行直播预览转换后的rtmp视频流</p><p><img src="/images/rtmp-result.png" alt=""></p><h3 id="ffmpeg将rtsp转码为hls"><a href="#ffmpeg将rtsp转码为hls" class="headerlink" title="ffmpeg将rtsp转码为hls"></a>ffmpeg将rtsp转码为hls</h3><p>使用ffmpeg命令,将rtsp转码为hls.ffmpeg参数项很多,未对其深究,直接参考网友的命令的.-i后面是rtsp流地址.</p><p><code>ffmpeg -f rtsp -rtsp_transport tcp -i rtsp://192.168.100.2/longzhu/demo_2 -r 23 -f hls -hls_time 4 -hls_list_size 5 -hls_wrap 10 /home/bz/Desktop/h5live/longzhuchao.m3u8</code></p><pre><code>在执行转码命令过程中,可能会报信息类似 Past duration 0.999992 too large 的警告错误,经查询资料,是在-r参数后面指定的视频帧率参数导致的.rtsp://184.72.239.149/vod/mp4://BigBuckBunny_175k.mov这个地址是网络上的地址,可使用vlc media player查看源的帧率而设置</code></pre><h4 id="使用VLC-media-player测试播放转换后的hls地址-m3u8文件"><a href="#使用VLC-media-player测试播放转换后的hls地址-m3u8文件" class="headerlink" title="使用VLC media player测试播放转换后的hls地址(m3u8文件)"></a>使用VLC media player测试播放转换后的hls地址(m3u8文件)</h4><p>打开VLC media player播放器.在工具栏”媒体-&gt;打开网络串流”然后输入<a href="http://192.168.100.31/hlsvideo/longzhuchao.m3u8点击确定即可进行直播预览转换后的rtmp视频流,该地址是在nginx中配置了的" target="_blank" rel="noopener">http://192.168.100.31/hlsvideo/longzhuchao.m3u8点击确定即可进行直播预览转换后的rtmp视频流,该地址是在nginx中配置了的</a></p><p><img src="/images/hls-result.png" alt=""></p><h3 id="ffmpeg推送视频文件到rtsp服务器"><a href="#ffmpeg推送视频文件到rtsp服务器" class="headerlink" title="ffmpeg推送视频文件到rtsp服务器"></a>ffmpeg推送视频文件到rtsp服务器</h3><p><code>ffmpeg -re -i ./龙珠超.布罗利.mp4 -vcodec copy -codec copy -f rtsp rtsp://192.168.252.1/longzhu/demo_2</code></p><pre><code>注:使用了easydarwin,rtsp://192.168.252.1地址就是启动easydarwin成功后的rtsp server地址</code></pre><h4 id="使用VLC-media-player测试播放推流后rtsp地址"><a href="#使用VLC-media-player测试播放推流后rtsp地址" class="headerlink" title="使用VLC media player测试播放推流后rtsp地址"></a>使用VLC media player测试播放推流后rtsp地址</h4><p><img src="/images/push_to_rtsp.png" alt=""></p><h3 id="ffmpeg推送视频文件到rtmp服务器"><a href="#ffmpeg推送视频文件到rtmp服务器" class="headerlink" title="ffmpeg推送视频文件到rtmp服务器"></a>ffmpeg推送视频文件到rtmp服务器</h3><p><code>ffmpeg -re -i ./龙珠超.布罗利.mp4 -vcodec copy -acodec copy -b:v 800k -b:a 32k -f flv rtmp://192.168.100.31:1935/rtmplive_demo/demo_3</code></p><pre><code>注:rtmp地址中的rtmplive_demo必须和nginx中配置的application名称一致才能推流成功,192.168.100.31是我的一台虚拟机</code></pre><h4 id="使用VLC-media-player测试播放推流后rtmp地址"><a href="#使用VLC-media-player测试播放推流后rtmp地址" class="headerlink" title="使用VLC media player测试播放推流后rtmp地址"></a>使用VLC media player测试播放推流后rtmp地址</h4><p><img src="/images/push_to_rtmp.png" alt=""></p><h3 id="ffmpeg转发rtsp流"><a href="#ffmpeg转发rtsp流" class="headerlink" title="ffmpeg转发rtsp流"></a>ffmpeg转发rtsp流</h3><p><code>ffmpeg -i rtsp://192.168.100.2:8554/longzhu/live -codec copy -f rtsp rtsp://192.168.252.1/longzhu/demo_1</code></p><pre><code>第一个rtsp是源地址,第二个是新地址.但是必须保证新地址是能够支持rtsp协议的才行.我试过使用nginx+rtsp是不能够成功的.所以换成了easydarwin,rtsp://192.168.252.1地址就是启动easydarwin成功后的rtsp server地址.</code></pre><p>效果图如下:</p><p><img src="/images/rtsp_to_rtsp.png" alt=""></p><p><strong>注:关于测试rtsp地址问题,上面的地址我测试的时候能够使用,但是不能保证以后能够一直正常使用,所以有网友图文讲解了使用VLC media player自制rtsp流.小伙伴的力量强大!其地址如下:<a href="https://blog.csdn.net/taoerit/article/details/51920018" target="_blank" rel="noopener">https://blog.csdn.net/taoerit/article/details/51920018</a><br>为了防止地址失效,我将页面截了一张完整图.图片如下:</strong></p><p><img src="/images/build_push_rtsp.jpg" alt=""></p>]]></content>
      
      
      
        <tags>
            
            <tag> nginx </tag>
            
            <tag> rtmp </tag>
            
            <tag> rtsp </tag>
            
            <tag> ffmpeg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>deepin linux下初识docker</title>
      <link href="/2019/05/29/deepin-linux%E4%B8%8B%E5%88%9D%E8%AF%86docker/"/>
      <url>/2019/05/29/deepin-linux%E4%B8%8B%E5%88%9D%E8%AF%86docker/</url>
      
        <content type="html"><![CDATA[<h3 id="deepin-linux-安装最新版-docker"><a href="#deepin-linux-安装最新版-docker" class="headerlink" title="deepin linux 安装最新版 docker"></a>deepin linux 安装最新版 docker</h3><p>可以参考官放 wiki 文档进行安装,地址如下:</p><p><a href="https://wiki.deepin.org/wiki/Docker#.E5.9C.A8_Deepin_.E4.B8.AD.E5.AE.89.E8.A3.85_Docker_.E6.9C.80.E6.96.B0.E7.89.88.E7.9A.84.E6.96.B9.E6.B3.95" target="_blank" rel="noopener">https://wiki.deepin.org/wiki/Docker#.E5.9C.A8_Deepin_.E4.B8.AD.E5.AE.89.E8.A3.85_Docker_.E6.9C.80.E6.96.B0.E7.89.88.E7.9A.84.E6.96.B9.E6.B3.95</a></p><p>但官网打开速度比较慢,另外关于最后一项禁止开启自启官方说的方式是无效的,笔者亲试至少在(deepin 15.10.1 基于 unstable 升级上来的)是无效的.所以将详情步骤记录如下:</p><pre><code>注:执行apt命令之前,最好先执行一次更新仓库操作sudo apt update</code></pre><p>1.如果以前安装过老版本，要确保先卸载以前版本.</p><p><code>sudo apt remove docker.io docker-engine</code></p><p>2.安装密钥管理与下载相关的工具</p><p>// 密钥管理（add-apt-repository ca-certificates 等）与下载（curl 等）相关的工具</p><p><code>sudo apt-get install apt-transport-https ca-certificates curl python-software-properties software-properties-common</code></p><p>3.下载并安装密钥</p><p><code>curl -fsSL https://download.docker.com/linux/debian/gpg | sudo apt-key add -</code></p><p>执行成功后返回 OK 即可.如果不成功的话,可能是网络问题,我这儿是处于翻墙状态,所以是能成功的.不能成功的话,可以按照官方 wiki 上说的使用国内镜像源<code>curl -fsSL https://mirrors.ustc.edu.cn/docker-ce/linux/debian/gpg | sudo apt-key add -</code></p><p>4.查看密钥是否安装成功</p><p><code>sudo apt-get fingerprint 0EBFCD88</code></p><p>如果成功会提示</p><p><code>pub 4096R/0EBFCD88 2017-02-22 Key fingerprint = 9DC8 5822 9FC7 DD38 854A E2D8 8D81 803C 0EBF CD88</code><br><code>uid Docker Release (CE deb) &lt;docker@docker.com&gt;</code><br><code>sub 4096R/F273FCD8 2017-02-22</code></p><p>5.在 source.list 中添加 docker-ce 软件源</p><pre><code>在此需要注意当前系统版本,执行 cat /etc/debian_version查看当前系统是基于debian的哪个版本.debian版本号和系统代号如下:</code></pre><table><thead><tr><th>系统代号</th><th>版本号</th></tr></thead><tbody><tr><td>squeeze</td><td>6.x</td></tr><tr><td>wheezy</td><td>7.x</td></tr><tr><td>jessie</td><td>8.x</td></tr><tr><td>stretch</td><td>9.x</td></tr></tbody></table><p>deepin 15.10.x 是基于 debian9.0 的,所以加入源如下:</p><p>sudo vim /etc/apt/sources.list</p><p><code>deb [arch=amd64] https://mirrors.ustc.edu.cn/docker-ce/linux/debian stretch stable</code></p><p>6.更新仓库</p><p><code>sudo apt update</code></p><p>7.安装 docker-ce</p><p><code>sudo apt install docker-ce</code></p><pre><code>注:这一步网络不好可能会导致失败,多试几次总会成功的.</code></pre><p>8.启动 docker</p><p><code>sudo systemctl start docker</code> 或者<br><code>service docker start</code></p><p>9.查看安装的版本信息</p><p><code>docker version</code></p><p>10.验证 docker 是否被正确安装并且能够正常使用</p><p><code>sudo docker run hello-world</code></p><p>如果能够正常下载，并能够正常执行，则说明 docker 正常安装</p><p>11.让普通用户也能运行 docker</p><pre><code>默认情况下，普通用户运行 docker 会有权限问题，每次运行都得加 sudo，很麻烦。把你的账号加到 docker 用户组后就不用加 sudo 了：</code></pre><p><code>sudo usermod -aG docker test</code> // test 是用户名,替换为自己的,执行后注销登录</p><p>12.docker service 默认是开机自启的,强迫症取消开机自启的</p><pre><code>这一点,官方说的安装chkconfig来管理</code></pre><p>安装 chkconfig</p><p><code>sudo apt install chkconfig</code></p><p>移除自启</p><p><code>sudo chkconfig --del docker</code></p><pre><code>但是试了,重启无效无效.需要通过systemctl命令来禁止</code></pre><p><code>sudo systemctl disable docker</code></p><h3 id="docker-使用初识"><a href="#docker-使用初识" class="headerlink" title="docker 使用初识"></a>docker 使用初识</h3><h4 id="docker-入门命令"><a href="#docker-入门命令" class="headerlink" title="docker 入门命令"></a>docker 入门命令</h4><p>docker 安装后,默认是没有任何镜像的,如果安装后执行了 docker run hello-world 的话,是有一个 hello-world 的镜像的.</p><p><code>docker images</code> // 查看本地的镜像</p><p>可以通过 pull 命令获取相关镜像</p><p><code>docker search nginx</code> // 在 docker.io 上搜索 nginx 相关的镜像</p><p><code>docker pull nginx:latest</code> // latest 代表取最新版本,要获取其他版本 docker pull nginx:xxxx</p><p><code>docker run -itd --name nginx1.0 nginx</code> // -d: 后台启动容器;-i: 以交互模式运行容器，通常与 -t 同时使用;-t: 为容器重新分配一个伪输入终端，通常与 -i 同时使用; –name：容器的别名，默认为随机的,这儿为 nginx1.0</p><pre><code>第一次使用run运行指定别名后,以后可通过docker start+ 别名的方式启动</code></pre><p><code>docker ps</code> // 查看正在运行的容器</p><p><code>docker ps -a</code> // 查看所有容器</p><p><code>docker ps -l</code> // 查看最近一次运行的容器</p><p><code>docker exec -it nginx1.0 bash</code> // 进入 nginx1.0 容器的命令行</p><p><code>docker start nginx1.0</code> // 启动 nginx1.0 容器</p><p><code>docker stop nginx1.0</code> // 停止 nginx1.0 容器</p><p><code>docker rm nginx1.0</code> // 删除 nginx1.0 容器</p><h4 id="docker-网络"><a href="#docker-网络" class="headerlink" title="docker 网络"></a>docker 网络</h4><p>linux 使用 namespace 来进行资源的隔离 ，docker 的隔离性</p><p>1.docker 的网路类型分为：</p><p>Bridge 模式：桥接（默认的模式）</p><p>host 模式：容器将不会获得独立的 network namespace，将和主机公用一个；即在 docker 中使用网络和主机上一样的；</p><p>None：不与外界任何东西进行通讯</p><p>2.采用 Bridge 的时候需要和主机通讯，就需要使用端口映射</p><p>docker run -d –name nginx1.0 -p 8080:80 nginx # 主机的 8080 端口映射到容器中的 80 端口</p><pre><code>多个端口映射可以跟多个-p,比如:-p 8080:80 -p 6379:6379</code></pre><h4 id="docker-镜像备份和导入镜像"><a href="#docker-镜像备份和导入镜像" class="headerlink" title="docker 镜像备份和导入镜像"></a>docker 镜像备份和导入镜像</h4><p><code>docker save -o /home/xxx/images/nginx.tar nginx1.0</code> // 将 nginx1.0 镜像备份到/home/xxx/images/目录下</p><p><code>docker load --input /home/xxx/images/nginx.tar</code> // 导入镜像</p><h4 id="docker挂载物理机本地目录"><a href="#docker挂载物理机本地目录" class="headerlink" title="docker挂载物理机本地目录"></a>docker挂载物理机本地目录</h4><p>docker可以支持把一个宿主机上的目录挂载到镜像里。</p><p><code>docker run -itd -v /home/bz/Downloads:/home/Downloads nginx1.0</code> // 通过-v参数，冒号前为宿主机目录，必须为绝对路径，冒号后为镜像内挂载的路径</p><p>默认挂载的路径权限为读写。如果指定为只读可以用：ro</p><p><code>docker run -itd -v /home/bz/Downloads:/home/Downloads:ro nginx1.0</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pdfbox解析PDF文件</title>
      <link href="/2019/05/14/pdfbox%E8%A7%A3%E6%9E%90PDF%E6%96%87%E4%BB%B6/"/>
      <url>/2019/05/14/pdfbox%E8%A7%A3%E6%9E%90PDF%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<pre><code>摘要:  最近需要使用到对PDF文件内容进行解析,然后对文件的部分内容进行索引查询.在解析的PDF的时候Java语言有2个  开源的PDF工具:PDFbox和Itext.</code></pre><p>PDFbox和Itext都能读取、解析pdf文件，并且可对文件进行修改.有小伙伴将2个工具对比总结出以下结论:<br><strong>在读取和解析PDF的时候使用PDFBox，较为简单，示例较为详细;修改PDF的时候使用Itext，支持粒度较细，比如控制文字字体等</strong></p><h3 id="Itext"><a href="#Itext" class="headerlink" title="Itext"></a>Itext</h3><p>  iText是著名的开放项目，是用于生成PDF文档的一个java类库。通过iText不仅可以生成PDF或rtf的文档，而且可以将XML、Html文件转化为PDF文件等.目前只是用到对PDF文档的解析,所以对于Itext具体使用暂未查看,</p><pre><code>官网:https://itextpdf.com/插入文字可以自定义字体，使用字库文件(ttf)</code></pre><h3 id="PDFBox"><a href="#PDFBox" class="headerlink" title="PDFBox"></a>PDFBox</h3><h4 id="引入PDFBox工具库jar"><a href="#引入PDFBox工具库jar" class="headerlink" title="引入PDFBox工具库jar"></a>引入PDFBox工具库jar</h4><pre><code>&lt;dependency&gt;    &lt;groupId&gt;org.apache.pdfbox&lt;/groupId&gt;    &lt;artifactId&gt;pdfbox&lt;/artifactId&gt;    &lt;version&gt;2.0.15&lt;/version&gt; &lt;!--当前使用2.0.15的版本--&gt;&lt;/dependency&gt;</code></pre><h4 id="编写PDFUtils类"><a href="#编写PDFUtils类" class="headerlink" title="编写PDFUtils类"></a>编写PDFUtils类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.pdfbox.cos.COSName;</span><br><span class="line"><span class="keyword">import</span> org.apache.pdfbox.io.RandomAccessBuffer;</span><br><span class="line"><span class="keyword">import</span> org.apache.pdfbox.pdfparser.PDFParser;</span><br><span class="line"><span class="keyword">import</span> org.apache.pdfbox.pdmodel.PDDocument;</span><br><span class="line"><span class="keyword">import</span> org.apache.pdfbox.pdmodel.PDPage;</span><br><span class="line"><span class="keyword">import</span> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject;</span><br><span class="line"><span class="keyword">import</span> org.apache.pdfbox.text.PDFTextStripper;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * pdf文档解析工具类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> bz</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PDFUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(PDFUtils.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pdfPath pdf文件路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> PDDocument <span class="title">initPDDocument</span><span class="params">(String pdfPath)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        File pdfFile = Paths.get(pdfPath).toFile();</span><br><span class="line">        <span class="keyword">if</span> (!pdfFile.exists()) &#123;</span><br><span class="line">            logger.error(<span class="string">"pdf文件不存在"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 新建一个PDF解析器对象</span></span><br><span class="line">        PDFParser pdfParser = <span class="keyword">new</span> PDFParser(<span class="keyword">new</span> RandomAccessBuffer(<span class="keyword">new</span> FileInputStream(pdfFile)));</span><br><span class="line">        <span class="comment">// 对PDF文件进行解析</span></span><br><span class="line">        pdfParser.parse();</span><br><span class="line">        <span class="comment">// 获取解析后得到的PDF文档对象</span></span><br><span class="line">        PDDocument pdfdocument = pdfParser.getPDDocument();</span><br><span class="line">        <span class="keyword">return</span> pdfdocument;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> inputStream 输入流</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> PDDocument <span class="title">initPDDocument</span><span class="params">(InputStream inputStream)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 新建一个PDF解析器对象</span></span><br><span class="line">        PDFParser pdfParser = <span class="keyword">new</span> PDFParser(<span class="keyword">new</span> RandomAccessBuffer(inputStream));</span><br><span class="line">        <span class="comment">// 对PDF文件进行解析</span></span><br><span class="line">        pdfParser.parse();</span><br><span class="line">        <span class="comment">// 获取解析后得到的PDF文档对象</span></span><br><span class="line">        PDDocument pdfdocument = pdfParser.getPDDocument();</span><br><span class="line">        <span class="keyword">return</span> pdfdocument;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解析pdf文档中的字符内容</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pdDocument</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> startPage  开始页码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> endPage    结束页码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getContent</span><span class="params">(PDDocument pdDocument, <span class="keyword">int</span> startPage, <span class="keyword">int</span> endPage)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (endPage &lt;= startPage) &#123;</span><br><span class="line">            logger.error(<span class="string">"页码参数不正确"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 新建一个PDF文本剥离器</span></span><br><span class="line">        PDFTextStripper stripper = <span class="keyword">new</span> PDFTextStripper();</span><br><span class="line">        stripper.setStartPage(startPage); <span class="comment">// 开始提取页数</span></span><br><span class="line">        stripper.setEndPage(endPage); <span class="comment">// 结束提取页数</span></span><br><span class="line">        <span class="comment">// 从PDF文档对象中剥离文本</span></span><br><span class="line">        String result = stripper.getText(pdDocument);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解析pdf文档中的所有图片列表</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pdDocument</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> startPage  开始页码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> endPage    结束页码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;PDImageXObject&gt; <span class="title">getImageList</span><span class="params">(PDDocument pdDocument, <span class="keyword">int</span> startPage, <span class="keyword">int</span> endPage)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (endPage &lt;= startPage) &#123;</span><br><span class="line">            logger.error(<span class="string">"页码参数不正确"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;PDImageXObject&gt; imageList = <span class="keyword">new</span> ArrayList&lt;PDImageXObject&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = startPage; i &lt; endPage; i++) &#123;</span><br><span class="line">            PDPage page = pdDocument.getPage(i);</span><br><span class="line">            Iterable&lt;COSName&gt; objectNames = page.getResources().getXObjectNames();</span><br><span class="line">            <span class="keyword">for</span> (COSName imageObjectName : objectNames) &#123;</span><br><span class="line">                <span class="keyword">if</span> (page.getResources().isImageXObject(imageObjectName)) &#123;</span><br><span class="line">                    PDImageXObject imageXObject = (PDImageXObject) page.getResources()</span><br><span class="line">                            .getXObject(imageObjectName);</span><br><span class="line">                    imageList.add(imageXObject);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> imageList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="调用PDFUtils类方法"><a href="#调用PDFUtils类方法" class="headerlink" title="调用PDFUtils类方法"></a>调用PDFUtils类方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    PDDocument pdDocument = PDFUtils.initPDDocument(<span class="string">"/home/bz/Desktop/1.pdf"</span>);</span><br><span class="line">    <span class="keyword">if</span> (pdDocument != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 获取文档文本内容</span></span><br><span class="line">        String result = PDFUtils.getContent(pdDocument, <span class="number">0</span>, pdDocument.getNumberOfPages());</span><br><span class="line">        System.out.println(<span class="string">"PDF文件的文本内容如下："</span>);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">        <span class="comment">// 获取文档中的所有图片</span></span><br><span class="line">        List&lt;PDImageXObject&gt; imageList = PDFUtils.getImageList(pdDocument, <span class="number">0</span>,pdDocument.getNumberOfPages());</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; imageList.size(); i++) &#123;</span><br><span class="line">            PDImageXObject imageXObject = imageList.get(i);</span><br><span class="line">            BufferedImage bufferedImage = imageXObject.getImage();</span><br><span class="line">            ImageIO.write(bufferedImage, imageXObject.getSuffix(),</span><br><span class="line">                    <span class="keyword">new</span> FileOutputStream(Paths</span><br><span class="line">                            .get(<span class="string">"/home/bz/Desktop/"</span> + i + <span class="string">"."</span> + imageXObject.getSuffix()).toFile()));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> pdfbox </tag>
            
            <tag> pdf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL中utf8和utf8mb4区别对emoji支持</title>
      <link href="/2019/04/27/MySQL%E4%B8%ADutf8%E5%92%8Cutf8mb4%E5%8C%BA%E5%88%AB%E5%AF%B9emoji%E6%94%AF%E6%8C%81/"/>
      <url>/2019/04/27/MySQL%E4%B8%ADutf8%E5%92%8Cutf8mb4%E5%8C%BA%E5%88%AB%E5%AF%B9emoji%E6%94%AF%E6%8C%81/</url>
      
        <content type="html"><![CDATA[<pre><code>摘要:  MySQL在5.5.3之后增加了这个utf8mb4的编码，mb4就是most bytes 4的意思，专门用来兼容  四字节的unicode。好在utf8mb4是utf8的超集，除了将编码改为utf8mb4外不需要做其他转换。  当然，为了节省空间，一般情况下使用utf8也就够了.  查看当前的MySQL版本:  mysql&gt; select version();  或者  mysql --version</code></pre><h3 id="utf8不支持emoji表情的问题"><a href="#utf8不支持emoji表情的问题" class="headerlink" title="utf8不支持emoji表情的问题"></a>utf8不支持emoji表情的问题</h3><p>  当使用utf8字符集的时候,插入emoji表情符号会提示” Incorrect string value: ‘\xXX\xXX\xXX\xXX’ for column……”,原因在于MySQL中utf8字符集只支持三字节UTF-8编码的Unicode范围，而emoji字符属于四字节编码部分.此时,需要将库表的字符集更改为utf8mb4</p><h3 id="修改字符集为utf8mb4"><a href="#修改字符集为utf8mb4" class="headerlink" title="修改字符集为utf8mb4"></a>修改字符集为utf8mb4</h3><p>  修改/etc/mysql/my.cnf文件或者/etc/mysql/mysql.conf.d/mysqld.cnf文件,修改以下参数:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[client]</span><br><span class="line">default-character-set=utf8mb4</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">[mysql]</span><br><span class="line">default-character-set=utf8mb4</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">[mysqld]</span><br><span class="line">character-set-server = utf8mb4</span><br><span class="line">collation-server = utf8mb4_unicode_ci</span><br><span class="line">init_connect = &apos;SET NAMES utf8mb4&apos;</span><br><span class="line">character-set-client-handshake = false</span><br></pre></td></tr></table></figure><pre><code>注:1.init_connect=&apos;SET NAMES utf8mb4&apos; 表示初始化连接都设置为utf8mb4字符集;2.skip-character-set-client-handshake = true 忽略客户端字符集设置，不论客户端是何种字符集，都按照init_connect中的设置进行使用</code></pre><h3 id="对数据库相关的表进行字符集修改"><a href="#对数据库相关的表进行字符集修改" class="headerlink" title="对数据库相关的表进行字符集修改"></a>对数据库相关的表进行字符集修改</h3><h4 id="建立新库和表的情况-直接使用utf8mb4字符"><a href="#建立新库和表的情况-直接使用utf8mb4字符" class="headerlink" title="建立新库和表的情况,直接使用utf8mb4字符"></a>建立新库和表的情况,直接使用utf8mb4字符</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE IF NOT EXISTS test default charset utf8mb4 COLLATE utf8mb4_unicode_ci;</span><br><span class="line"></span><br><span class="line">CREATE TABLE `t_table`  (</span><br><span class="line">  `id` varchar(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,</span><br><span class="line">  `create_time` datetime(0) NULL DEFAULT NULL,</span><br><span class="line">  &apos;comment&apos; varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,</span><br><span class="line">  PRIMARY KEY (`id`) USING BTREE</span><br><span class="line">) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_unicode_ci ROW_FORMAT = Dynamic;</span><br></pre></td></tr></table></figure><h4 id="已经存在表的情况-对库-表和字段都修改为utf8mb4"><a href="#已经存在表的情况-对库-表和字段都修改为utf8mb4" class="headerlink" title="已经存在表的情况,对库,表和字段都修改为utf8mb4"></a>已经存在表的情况,对库,表和字段都修改为utf8mb4</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; ALTER DATABASE test CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;</span><br><span class="line"></span><br><span class="line">mysql&gt;ALTER TABLE `t_table` CONVERT TO CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;</span><br><span class="line"></span><br><span class="line">mysql&gt;ALTER TABLE `t_table` MODIFY COLUMN `comment`  varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;</span><br></pre></td></tr></table></figure><h3 id="重启MySQL服务"><a href="#重启MySQL服务" class="headerlink" title="重启MySQL服务"></a>重启MySQL服务</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/mysqld restart 或者service mysql restart</span><br></pre></td></tr></table></figure><h3 id="登录数据库查看字符集是否更改成功"><a href="#登录数据库查看字符集是否更改成功" class="headerlink" title="登录数据库查看字符集是否更改成功"></a>登录数据库查看字符集是否更改成功</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SHOW VARIABLES WHERE Variable_name LIKE &apos;character%&apos; OR Variable_name LIKE &apos;collation%&apos;;</span><br><span class="line"></span><br><span class="line">+--------------------------+----------------------------+</span><br><span class="line">| Variable_name            | Value                      |</span><br><span class="line">+--------------------------+----------------------------+</span><br><span class="line">| character_set_client     | utf8mb4                    |</span><br><span class="line">| character_set_connection | utf8mb4                    |</span><br><span class="line">| character_set_database   | utf8mb4                    |</span><br><span class="line">| character_set_filesystem | binary                     |</span><br><span class="line">| character_set_results    | utf8mb4                    |</span><br><span class="line">| character_set_server     | utf8mb4                    |</span><br><span class="line">| character_set_system     | utf8                       |</span><br><span class="line">| character_sets_dir       | /usr/share/mysql/charsets/ |</span><br><span class="line">| collation_connection     | utf8mb4_unicode_ci         |</span><br><span class="line">| collation_database       | utf8mb4_unicode_ci         |</span><br><span class="line">| collation_server         | utf8mb4_unicode_ci         |</span><br><span class="line">+--------------------------+----------------------------+</span><br></pre></td></tr></table></figure><pre><code>关于Windows下MySQL的一点坑:之前一个旧式的服务器采用的是Windows server2012,mysql使用的是安装版的.安装路径在C:\Program Files\MySQL\MySQL Server 5.6下.有个my-default.ini配置文件,但是无论对这个文件如何配置修改,重启服务器都无效.经过多方搜索,发现Windows下MySQL服务默认使用的不是该文件,而是采用C:\ProgramData\MySQL\MySQL Server 5.6下的my.ini这个文件.所以需要对这个文件修改才能使其生效.</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx限制某个IP同一时间段的访问次数</title>
      <link href="/2019/04/22/nginx%E9%99%90%E5%88%B6%E6%9F%90%E4%B8%AAIP%E5%90%8C%E4%B8%80%E6%97%B6%E9%97%B4%E6%AE%B5%E7%9A%84%E8%AE%BF%E9%97%AE%E6%AC%A1%E6%95%B0/"/>
      <url>/2019/04/22/nginx%E9%99%90%E5%88%B6%E6%9F%90%E4%B8%AAIP%E5%90%8C%E4%B8%80%E6%97%B6%E9%97%B4%E6%AE%B5%E7%9A%84%E8%AE%BF%E9%97%AE%E6%AC%A1%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>  摘要:</p><pre><code>nginx可以通过HttpLimitReqModul和HttpLimitZoneModule配置来限制ip在同一时间段的访问次数来防cc攻击HttpLimitReqModul用来限制连单位时间内连接数的模块，使用limit_req_zone和limit_req指令配合使用来达到限制。一旦并发连接超过指定数量，就会返回503错误。HttpLimitConnModul用来限制单个ip的并发连接数，使用limit_zone和limit_conn指令注:两个模块的区别前一个是对一段时间内的连接数限制，后者是对同一时刻的连接数限制</code></pre><h3 id="HttpLimitReqModul-限制某一段时间内同一ip访问数实例"><a href="#HttpLimitReqModul-限制某一段时间内同一ip访问数实例" class="headerlink" title="HttpLimitReqModul 限制某一段时间内同一ip访问数实例"></a>HttpLimitReqModul 限制某一段时间内同一ip访问数实例</h3><p>在http作用域下配置limit_req_zone指令,如下:<br>  <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">    http&#123;</span><br><span class="line">      ...</span><br><span class="line">      #定义一个名为allips的limit_req_zone用来存储session，大小是10M内存，</span><br><span class="line">      #以$binary_remote_addr 为key,限制平均每秒的请求为20个，</span><br><span class="line">      #1M能存储16000个状态，rete的值必须为整数，</span><br><span class="line">      #如果限制两秒钟一个请求，可以设置成30r/m</span><br><span class="line">      limit_req_zone $binary_remote_addr zone=allips:10m rate=20r/s;</span><br><span class="line">      ...</span><br><span class="line">      server&#123;</span><br><span class="line">          ...</span><br><span class="line">          location &#123;</span><br><span class="line">              ...</span><br><span class="line">  </span><br><span class="line">              #限制每ip每秒不超过20个请求，漏桶数burst为5</span><br><span class="line">              #brust的意思就是，如果第1秒、2,3,4秒请求为19个，</span><br><span class="line">              #第5秒的请求为25个是被允许的。</span><br><span class="line">              #但是如果你第1秒就25个请求，第2秒超过20的请求返回503错误。</span><br><span class="line">              #nodelay，如果不设置该选项，严格使用平均速率限制请求数，</span><br><span class="line">              #第1秒25个请求时，5个请求放到第2秒执行，</span><br><span class="line">              #设置nodelay，25个请求将在第1秒执行。</span><br><span class="line">  </span><br><span class="line">              limit_req zone=allips burst=5 nodelay;</span><br><span class="line">              ...</span><br><span class="line">          &#125;</span><br><span class="line">          ...</span><br><span class="line">      &#125;</span><br><span class="line">      ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="HttpLimitZoneModule-限制并发连接数实例"><a href="#HttpLimitZoneModule-限制并发连接数实例" class="headerlink" title="HttpLimitZoneModule 限制并发连接数实例"></a>HttpLimitZoneModule 限制并发连接数实例</h3><p>在http作用域下配置limit_zone指令,limit_zone只能定义在http作用域，limit_conn可以定义在http server location作用域.如下</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">  http&#123;</span><br><span class="line">    ...</span><br><span class="line"> </span><br><span class="line">    #定义一个名为one的limit_zone,大小10M内存来存储session，</span><br><span class="line">    #以$binary_remote_addr 为key</span><br><span class="line">    #nginx 1.18以后用limit_conn_zone替换了limit_conn</span><br><span class="line">    #且只能放在http作用域</span><br><span class="line">    limit_conn_zone   one  $binary_remote_addr  10m; </span><br><span class="line">    ...</span><br><span class="line">    server&#123;</span><br><span class="line">        ...</span><br><span class="line">        location &#123;</span><br><span class="line">            ...</span><br><span class="line">           limit_conn one 20;          #连接数限制</span><br><span class="line"> </span><br><span class="line">           #带宽限制,对单个连接限数，如果一个ip两个连接，就是500x2k</span><br><span class="line">           limit_rate 500k;           </span><br><span class="line"> </span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="nginx白名单设置"><a href="#nginx白名单设置" class="headerlink" title="nginx白名单设置"></a>nginx白名单设置</h3><p>上面默认配置对多有的ip都有限制,有些时候我们不希望对搜索引擎的蜘蛛或者自己测试ip进行限制，<br>对于特定的白名单ip我们可以借助geo指令实现,如下:</p><pre><code>geo指令定义了一个白名单$limited变量，默认值为1，如果客户端ip在上面的范围内，$limited的值为0</code></pre><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">http&#123;</span><br><span class="line">   geo $limited&#123;</span><br><span class="line">      default 1;</span><br><span class="line">      #google</span><br><span class="line">      64.233.160.0/19 0;</span><br><span class="line">      65.52.0.0/14 0;</span><br><span class="line">      66.102.0.0/20 0;</span><br><span class="line">      66.249.64.0/19 0;</span><br><span class="line">      72.14.192.0/18 0;</span><br><span class="line">      74.125.0.0/16 0;</span><br><span class="line">      209.85.128.0/17 0;</span><br><span class="line">      216.239.32.0/19 0;</span><br><span class="line">      #M$</span><br><span class="line">      64.4.0.0/18 0;</span><br><span class="line">      157.60.0.0/16 0;</span><br><span class="line">      157.54.0.0/15 0;</span><br><span class="line">      157.56.0.0/14 0;</span><br><span class="line">      207.46.0.0/16 0;</span><br><span class="line">      207.68.192.0/20 0;</span><br><span class="line">      207.68.128.0/18 0;</span><br><span class="line">      #yahoo</span><br><span class="line">      8.12.144.0/24 0;</span><br><span class="line">      66.196.64.0/18 0;</span><br><span class="line">      66.228.160.0/19 0;</span><br><span class="line">      67.195.0.0/16 0;</span><br><span class="line">      74.6.0.0/16 0;</span><br><span class="line">      68.142.192.0/18 0;</span><br><span class="line">      72.30.0.0/16 0;</span><br><span class="line">      209.191.64.0/18 0;</span><br><span class="line">      #My IPs</span><br><span class="line">      127.0.0.1/32 0;</span><br><span class="line">      123.456.0.0/28 0; #example for your server CIDR</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git常用的使用总结</title>
      <link href="/2019/03/16/git%E5%B8%B8%E7%94%A8%E7%9A%84%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/"/>
      <url>/2019/03/16/git%E5%B8%B8%E7%94%A8%E7%9A%84%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<pre><code>摘要:Git是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目</code></pre><h3 id="对一个已存在的远程仓库进行clone和提交代码操作"><a href="#对一个已存在的远程仓库进行clone和提交代码操作" class="headerlink" title="对一个已存在的远程仓库进行clone和提交代码操作"></a>对一个已存在的远程仓库进行clone和提交代码操作</h3><p>clone代码</p><blockquote><p>$ git clone [-b branchName] 远程地址 [filefolder name]</p></blockquote><blockquote><p>-b代表clone某个分支,后面跟分支的名称.代码clone到本地后,当前路径会多一个与git 远程项目名相同的文件夹(手工指定文件夹名除外).</p></blockquote><blockquote><p>$ cd 文件夹名</p></blockquote><p>提交代码:</p><blockquote><p>$ git status // 查看当前工作目录的状态</p></blockquote><blockquote><p>$ git add . 或 git add -u 或 git add -A(git add –all的缩写) //添加要提交的文件到git暂存区. 相关区别:三条命令对应的git版本不一样也有区别.</p></blockquote><blockquote><p>git1.x 版本<img src="/images/git1.x.jpg" alt=""></p></blockquote><blockquote><p>git2.x 版本<img src="/images/git2.x.jpg" alt=""></p></blockquote><blockquote><p>使用2.x以上版本的git使用-a和.是一样的.本人通常使用.更加方便快捷</p></blockquote><blockquote><p>$ git status // 添加文件到暂存区后再次查看确保文件的状态</p></blockquote><blockquote><p>$ git commit -m “注释”</p></blockquote><blockquote><p>$ git remote -v // 查看当前已经存在的git 远程url</p></blockquote><blockquote><p>$ git push -u 远程名称 本地要提交的分支:远程分支 // 远程分支不存在的时候会自动在远程创建该名称分支</p></blockquote><h3 id="已有代码在用户本地-远程不存在的情况"><a href="#已有代码在用户本地-远程不存在的情况" class="headerlink" title="已有代码在用户本地,远程不存在的情况"></a>已有代码在用户本地,远程不存在的情况</h3><blockquote><p>$ cd existing_folder</p></blockquote><blockquote><p>$ git init</p></blockquote><blockquote><p>$ git status</p></blockquote><blockquote><p>$ git remote add origin <a href="mailto:git@code.aliyun.com" target="_blank" rel="noopener">git@code.aliyun.com</a>:baz/foo.git</p></blockquote><blockquote><p>$ git add .</p></blockquote><blockquote><p>$ git status</p></blockquote><blockquote><p>$ git commit -m “注释”</p></blockquote><blockquote><p>$ git push -u origin master:master // 提交本地master到远程master</p></blockquote><h3 id="对远程初始化仓库有git-history-本地代码也有git-history的情况"><a href="#对远程初始化仓库有git-history-本地代码也有git-history的情况" class="headerlink" title="对远程初始化仓库有git history,本地代码也有git history的情况"></a>对远程初始化仓库有git history,本地代码也有git history的情况</h3><blockquote><p>针对远程本地都有git 提交的情况,比较特殊.比如阿里云code上面新建项目必须选择对应的模板,会进行对仓库初始化操作.而本地存在之前的项目(已经含有git记录,比如gitlab,coding之类的).推荐方式:先从远程clone下来.然后删除clone下来的文件夹下的文件(.git目录除外).然后commit-&gt;push提交到远程</p></blockquote><p>1.删除远程仓库不需要的文件</p><blockquote><p>$ git clone alicodeurl xxx</p></blockquote><blockquote><p>$ cd xxx</p></blockquote><blockquote><p>//去资源文件管理器中手动删除除.git目录外的其他文件. linux/osx也可cd 目录再rm删除</p></blockquote><blockquote><p>$ git status</p></blockquote><blockquote><p>$ git add .</p></blockquote><blockquote><p>$ git status</p></blockquote><blockquote><p>$ git commit -m “注释”</p></blockquote><blockquote><p>$ git push -u origin master:master // 提交本地master到远程master</p></blockquote><p>2.对本地项目进行提交到远程</p><blockquote><p>$ cd project filefolder</p></blockquote><blockquote><p>$ git remote add origin <a href="mailto:git@code.aliyun.com" target="_blank" rel="noopener">git@code.aliyun.com</a>:baz/foo.git</p></blockquote><blockquote><p>$ git pull origin master –allow-unrelated-histories // 会弹出merge的编辑器,删除或者增加内容后退出</p></blockquote><blockquote><p>$ git add .</p></blockquote><blockquote><p>$ git commit -m “注释”</p></blockquote><blockquote><p>$ git push -u origin master:master // 提交本地master到远程master</p></blockquote><h3 id="项目开发中的分支使用"><a href="#项目开发中的分支使用" class="headerlink" title="项目开发中的分支使用"></a>项目开发中的分支使用</h3><p>切换分支</p><blockquote><p>$ git checkout 分支名称</p></blockquote><p>创建分支dev</p><blockquote><p>$ git checkout -b dev  // 创建并进入到分支,git branch 可查看当前分支指针状态</p></blockquote><h4 id="注"><a href="#注" class="headerlink" title="注"></a>注</h4><p>约定在Dev分支上面进行编码开发.上述的所有提交代码命令必须在dev分支上执行,最后的一句git push 换成以下命令</p><blockquote><p>$ git push -u origin dev:dev // 提交本地dev到远程dev.第一次远程无dev会自动创建dev</p></blockquote><p>更新远程分支代码到本地:</p><blockquote><p>$ git fetch origin dev // fetch远程dev分支代码 ..避免使用pull</p></blockquote><p>在当前分支合并fetch下面的代码</p><blockquote><p>$ git merge origin/dev  // 合并从远程dev分支fetch下来的代码</p></blockquote><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>版本正式上线后,需要将dev分支发布到Master分支.采用以下命令:</p><blockquote><p>$ git checkout master  // 切换到Master分支</p></blockquote><blockquote><p>$ git merge –no-ff dev // 对Dev分支进行合并</p></blockquote><blockquote><p>使用–no-ff参数后，会执行正常合并，在Master分支上生成一个新节点。为了保证版本演进的清晰，推荐采用这种做法</p></blockquote><h3 id="Git4个阶段的撤销操作"><a href="#Git4个阶段的撤销操作" class="headerlink" title="Git4个阶段的撤销操作"></a>Git4个阶段的撤销操作</h3><blockquote><p>了解git阶段首选理解git的几个区:</p></blockquote><blockquote><p>工作区(working area),</p></blockquote><blockquote><p>暂存区(stage),</p></blockquote><blockquote><p>本地仓库(local repository),</p></blockquote><blockquote><p>远程仓库(remote repository).</p></blockquote><blockquote><p>每将文件存到不同的区的时候会产生一个状态,在加上最开始的一个状态总共5个状态.</p></blockquote><blockquote><p>未修改(Origin)</p></blockquote><blockquote><p>已修改(Modified)</p></blockquote><blockquote><p>已暂存(Staged)</p></blockquote><blockquote><p>已提交(Committed)</p></blockquote><blockquote><p>已推送(Pushed)</p></blockquote><h5 id="1-文件处于已修改的状态-即修改过文件-未暂存-add"><a href="#1-文件处于已修改的状态-即修改过文件-未暂存-add" class="headerlink" title="1.文件处于已修改的状态,即修改过文件.未暂存(add)"></a>1.文件处于已修改的状态,即修改过文件.未暂存(add)</h5><blockquote><p>文件已修改,恢复到初始状态(未做任何修改状态)</p></blockquote><blockquote><p>$git checkout . 或者 $git reset –hard origin/dev    // 恢复到与远程dev保持一致的状态,相当于刚clone dev的状态</p></blockquote><h5 id="2-文件处于已暂存-stage-未提交-commit"><a href="#2-文件处于已暂存-stage-未提交-commit" class="headerlink" title="2.文件处于已暂存(stage),未提交(commit)"></a>2.文件处于已暂存(stage),未提交(commit)</h5><blockquote><p>文件已经进行过git add . 操作,但是还未进行git commit操作</p></blockquote><blockquote><p>$git reset  // 恢复到已修改的状态</p></blockquote><blockquote><p>$git checkout . // 继续执行这条,就恢复到初始状态(未做任何修改状态)</p></blockquote><blockquote><p>如果要实现恢复到初始状态(未做任何修改状态),除了通过执行上面2步命令外,也可一直接执行下面这句,一步恢复到初始状态</p></blockquote><blockquote><p>$git reset –hard // 一步到初始状态</p></blockquote><h5 id="3-文件处于已提交-commit-未推送-push"><a href="#3-文件处于已提交-commit-未推送-push" class="headerlink" title="3.文件处于已提交(commit),未推送(push)"></a>3.文件处于已提交(commit),未推送(push)</h5><blockquote><p>这种情况下,代表已经提交到本地仓库了,既然已经污染了你的本地仓库，那么就从远程仓库把代码取回来吧.恢复到初始状态了,</p></blockquote><blockquote><p>$git reset –hard origin/dev  //<b>直接恢复到初始化状态,但已做的修改全部会丢失</b></p></blockquote><h5 id="4-文件处于已推送-push"><a href="#4-文件处于已推送-push" class="headerlink" title="4.文件处于已推送(push)"></a>4.文件处于已推送(push)</h5><blockquote><p>既git add了，又git commit了，并且还git push了，这时代码已经进入远程仓库。如果想恢复的话.由于本地仓库和远程仓库是等价的，只需要先恢复本地仓库，再强制push到远程仓库就好了</p></blockquote><blockquote><p>$git reset –hard HEAD^   //将本地恢复到初始状态,<b>之前已做的修改全部会丢失</b></p></blockquote><blockquote><p>$git push -f // 将本地仓库初始化后推送到远程,将远程保持和本地一致</p></blockquote><h5 id="注-只要还未影响到本地仓库-local-repository-的时候-即没有commit时-都可以恢复到已修改的状态-一旦commit后-影响了本地仓库-就只能恢复到上一次的本地仓库的版本-所做的修改都会丢失"><a href="#注-只要还未影响到本地仓库-local-repository-的时候-即没有commit时-都可以恢复到已修改的状态-一旦commit后-影响了本地仓库-就只能恢复到上一次的本地仓库的版本-所做的修改都会丢失" class="headerlink" title="注:只要还未影响到本地仓库(local repository)的时候,即没有commit时,都可以恢复到已修改的状态.一旦commit后,影响了本地仓库,就只能恢复到上一次的本地仓库的版本.所做的修改都会丢失.."></a>注:只要还未影响到本地仓库(local repository)的时候,即没有commit时,都可以恢复到已修改的状态.一旦commit后,影响了本地仓库,就只能恢复到上一次的本地仓库的版本.所做的修改都会丢失..</h5><p>###git撤销暂存区的文件</p><blockquote><p>有时候执行git add . 后,将当前目录下的所有改动文件都添加到了暂存区,此时如果有三两个文件是不需要添加进暂存区的,可以执行以下命令将文件从暂存区移除<br>$git rm –cached 文件名</p></blockquote><h3 id="git-tag的常用使用"><a href="#git-tag的常用使用" class="headerlink" title="git tag的常用使用"></a>git tag的常用使用</h3><blockquote><p>Git可以对某个版本打上标签(tag)，表示本版本为发行版</p></blockquote><blockquote><p>$git tag // 查看所有标签</p></blockquote><blockquote><p>$git tag -l 1.0.*  // 打印符合检索条件的标签</p></blockquote><blockquote><p>$git checkout 1.0.0 // 查看对应标签状态</p></blockquote><blockquote><p>$git tag -a 1.0.0 -m “1.0.0版本” // 创建带备注标签(推荐)</p></blockquote><blockquote><p>$git tag -a 1.0.0 0c3b62d -m “备注信息” // 针对特定commit版本SHA创建标签</p></blockquote><blockquote><p>$git tag -d 1.0.0 // 删除本地1.0.0标签</p></blockquote><blockquote><p>$git push origin –tags // 将本地所有标签发布到远程仓库</p></blockquote><blockquote><p>$git push origin 1.0.0 // 指定标签版本(1.0.0)发送</p></blockquote><blockquote><p>$git push origin –delete 1.0.0 // 删除远程仓库对应标签,此命令需要Git版本 &gt; V1.7.0</p></blockquote><blockquote><p>$git push origin :refs/tags/1.0.0 // 删除远程仓库对应标签,此命令需要Git版本 &lt; V1.7.0</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tomcat解决java.lang.IllegalArgumentException: Invalid character异常</title>
      <link href="/2019/02/21/tomcat%E8%A7%A3%E5%86%B3java-lang-IllegalArgumentException-Invalid-character%E5%BC%82%E5%B8%B8/"/>
      <url>/2019/02/21/tomcat%E8%A7%A3%E5%86%B3java-lang-IllegalArgumentException-Invalid-character%E5%BC%82%E5%B8%B8/</url>
      
        <content type="html"><![CDATA[<blockquote><p>tomcat新版添加了对于http头的验证。出现java.lang.IllegalArgumentException: Invalid character found in the request target. The valid char… 异常</p></blockquote><p>网上查找了几种方法归类</p><p>1.更换tomcat版本,但是7,8,9的版本都更换过,问题依然.但是有网友确实可以解决,但是更换到具体什么版本未知.</p><p>2.前端http请求的时候对参数进行URL编码处理,理论上是绝对可行的,但是已有的http请求数很多,一个一个修改工作量大.未试</p><p>3.配置tomcat的catalina.properties 添加或者修改： tomcat.util.http.parser.HttpParser.requestTargetAllow=|{}</p><p>4.使用Connector中relaxedPathChars和relaxedQueryChars属性可以解决问题.找到tomcat/conf/server.xml,在Connector中增加这两个配置.<br><code>&lt;Connector port=&quot;8080&quot; protocol=&quot;HTTP/1.1&quot;    relaxedPathChars=&quot;[]{}|\^&quot; relaxedQueryChars=&quot;[]{}|\^&quot; /&gt;</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于vue组件实现web端页面调用摄像头拍照</title>
      <link href="/2019/01/17/%E5%9F%BA%E4%BA%8Evue%E7%BB%84%E4%BB%B6%E5%AE%9E%E7%8E%B0web%E7%AB%AF%E9%A1%B5%E9%9D%A2%E8%B0%83%E7%94%A8%E6%91%84%E5%83%8F%E5%A4%B4%E6%8B%8D%E7%85%A7/"/>
      <url>/2019/01/17/%E5%9F%BA%E4%BA%8Evue%E7%BB%84%E4%BB%B6%E5%AE%9E%E7%8E%B0web%E7%AB%AF%E9%A1%B5%E9%9D%A2%E8%B0%83%E7%94%A8%E6%91%84%E5%83%8F%E5%A4%B4%E6%8B%8D%E7%85%A7/</url>
      
        <content type="html"><![CDATA[<pre><code>摘要:  基于vue组件化方式实现PC web端页面调用摄像头拍照功能,测试是在chrome浏览器的环境下.</code></pre><p>1.封装TakePhoto 组件,组件里面暴露出始化摄像头,拍照并且返回拍照后图片的base64码的方法</p><p>TakePhoto 组件的全部代码如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;wrapper&quot;&gt;</span><br><span class="line">    &lt;video</span><br><span class="line">      ref=&quot;video&quot;</span><br><span class="line">      :width=&quot;width&quot;</span><br><span class="line">      :height=&quot;height&quot;</span><br><span class="line">      autoplay</span><br><span class="line">      style=&quot;width= 100%; height=100%; object-fit: fill&quot;</span><br><span class="line">    &gt;&lt;/video&gt;</span><br><span class="line">    &lt;canvas ref=&quot;canvas&quot; width=&quot;300&quot; height=&quot;400&quot; v-show=&quot;taked&quot;&gt;&lt;/canvas&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &apos;TakePhoto&apos;,</span><br><span class="line">  props: &#123;</span><br><span class="line">    width: &#123;</span><br><span class="line">      default: 300 // 不传默认300</span><br><span class="line">    &#125;,</span><br><span class="line">    height: &#123;</span><br><span class="line">      default: 400 // 不传默认400</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      video: null,</span><br><span class="line">      track: &apos;&apos;,</span><br><span class="line">      taked: false</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    init(call) &#123;</span><br><span class="line">      this.taked = false</span><br><span class="line">      this.video = this.$refs.video</span><br><span class="line">      navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia</span><br><span class="line">      if (navigator.getUserMedia) &#123;</span><br><span class="line">        navigator.getUserMedia(&#123; video: true &#125;,</span><br><span class="line">          (stream) =&gt; &#123;</span><br><span class="line">            this.track = stream.getTracks()[0]  // 通过这个关闭摄像头</span><br><span class="line">            try &#123;</span><br><span class="line">              this.video.src = window.URL.createObjectURL(stream) // chrome版本&lt;=70</span><br><span class="line">            &#125; catch (e) &#123;</span><br><span class="line">              this.video.srcObject = stream // chrome版本&gt;70</span><br><span class="line">            &#125;</span><br><span class="line">            this.video.onloadedmetadata = (e) =&gt; &#123;</span><br><span class="line">              console.log(e)</span><br><span class="line">              this.video.play()</span><br><span class="line">              call(true)</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;, (err) =&gt; &#123;</span><br><span class="line">            console.log(err)</span><br><span class="line">            call(false)</span><br><span class="line">          &#125;</span><br><span class="line">        )</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        call(false)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    takePhoto(call) &#123;</span><br><span class="line">      let canvas = this.$refs.canvas</span><br><span class="line">      let context2D = canvas.getContext(&apos;2d&apos;)</span><br><span class="line">      context2D.fillStyle = &apos;#ffffff&apos;</span><br><span class="line">      context2D.fillRect(0, 0, this.width, this.height)</span><br><span class="line">      context2D.drawImage(this.video, 0, 0, this.width, this.height)</span><br><span class="line">      let image_code = canvas.toDataURL(&apos;image/png&apos;)//图片的base64</span><br><span class="line">      this.taked = true</span><br><span class="line">      call(true, image_code)</span><br><span class="line">      if (null != this.track) &#123;</span><br><span class="line">        this.track.stop()//关闭摄像头</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  destroyed() &#123;</span><br><span class="line">    if (null != this.track) &#123;</span><br><span class="line">      this.track.stop()//关闭摄像头</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">canvas &#123;</span><br><span class="line">position: absolute;</span><br><span class="line">left: 0;</span><br><span class="line">top: 0;</span><br><span class="line">z-index: 1000;</span><br><span class="line">&#125;</span><br><span class="line">.wrapper &#123;</span><br><span class="line">position: relative;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><pre><code>说明: 摄像区域的宽高由外部传入,不传采用默认的值.init()初始化摄像头,takePhoto()进行拍照操作</code></pre><p>2.调用TakePhoto组件里面的方法进行拍照</p><p>调用TakePhoto 组件的关键代码如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">  &lt;TakePhoto class=&quot;photo&quot; ref=&quot;photo&quot;&gt;&lt;/TakePhoto&gt;</span><br><span class="line">  &lt;div class=&quot;takePhoto-btn&quot; @click=&quot;handleTakePhoto&quot; &#123;&#123;statusMsg&#125;&#125;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">handleTakePhoto() &#123;</span><br><span class="line">  if (this.status === 1) &#123; // 初始化摄像头</span><br><span class="line">    this.statusMsg = &apos;查找设备中...&apos;</span><br><span class="line">    this.$refs.photo.init((res) =&gt; &#123;</span><br><span class="line">      if (res) &#123;</span><br><span class="line">        this.status = 2</span><br><span class="line">        this.statusMsg = &apos;拍照&apos;</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        alert(&apos;未发现设备&apos;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;) // 初始化摄像头</span><br><span class="line">  &#125; else if (this.status === 2) &#123; // 拍照</span><br><span class="line">    this.$refs.photo.takePhoto((res, img) =&gt; &#123;</span><br><span class="line">      if (res) &#123;</span><br><span class="line">        this.status = 3</span><br><span class="line">        console.log(img)</span><br><span class="line">        this.statusMsg = &apos;重新拍&apos;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125; else if (this.status === 3) &#123; // 重新拍</span><br><span class="line">    this.$refs.photo.init((res) =&gt; &#123;</span><br><span class="line">      if (res) &#123;</span><br><span class="line">        this.status = 2</span><br><span class="line">        this.statusMsg = &apos;拍照&apos;</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        alert(&apos;未发现设备&apos;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;) // 初始化摄像头</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>说明:组件中定义statusMsg和status两个变量,statusMsg主要是改变整个流程中状态信息的提示,status是对应的状态码.</code></pre><p>3.实际效果图</p><p><img src="/images/photo.gif" alt=""></p>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vscode配置前端vue开发环境</title>
      <link href="/2018/12/13/vscode%E9%85%8D%E7%BD%AE%E5%89%8D%E7%AB%AFvue%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
      <url>/2018/12/13/vscode%E9%85%8D%E7%BD%AE%E5%89%8D%E7%AB%AFvue%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<pre><code>摘要:  使用vscode配置前端vue开发环境</code></pre><p>1.安装好vscode后,安装常用的几个插件</p><pre><code>Auto Close Tag : 自动闭合标签插件Beautify : 格式化js,json,css,sass,html等文件ESLint : 使用eslint规范对代码进行处理file-icons : 文件图标,便利区分不同类型的文件Monokai Theme : 一款类似sublime text主流的主题设置,使界面美观,享受美好的编码心情Path Intellisense : 自动提示文件路径插件Prettier : 因为vscode默认的格式化是不能通过eslint校验规范的,需要改为此插件Vetur : vscode的vue工具插件HTML CSS Support : 在标签中class属性的时候,提示class的名称px2rem : 将像素值转为rem插件下面是markdown相关的插件Markdown-TOC : 对markdown文档生成目录的插件,有2个,请选择作者为AlanWalk的</code></pre><p>2.安装好上述插件后,对其进行配置设置(2018-12-15更 v.1.30.0)</p><pre><code>在文件-&gt;首选项-&gt;设置-&gt;用户设置里面写入以下配置</code></pre>  <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"workbench.startupEditor"</span>: <span class="string">"newUntitledFile"</span>,</span><br><span class="line">    <span class="attr">"window.title"</span>: <span class="string">"$&#123;dirty&#125;$&#123;activeEditorLong&#125;$&#123;separator&#125;$&#123;rootName&#125;$&#123;separator&#125;$&#123;appName&#125;"</span>,</span><br><span class="line">    <span class="attr">"extensions.ignoreRecommendations"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"workbench.iconTheme"</span>: <span class="string">"file-icons"</span>,</span><br><span class="line">    <span class="attr">"workbench.colorTheme"</span>: <span class="string">"Monokai"</span>,</span><br><span class="line">    <span class="attr">"vetur.format.defaultFormatter.js"</span>: <span class="string">"vscode-typescript"</span>,</span><br><span class="line">    <span class="attr">"extensions.autoUpdate"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"update.channel"</span>: <span class="string">"none"</span>,</span><br><span class="line">    <span class="attr">"eslint.autoFixOnSave"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"files.autoSave"</span>: <span class="string">"off"</span>,</span><br><span class="line">    <span class="attr">"eslint.validate"</span>: [</span><br><span class="line">        <span class="string">"javascript"</span>,</span><br><span class="line">        <span class="string">"javascriptreact"</span>,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"language"</span>: <span class="string">"vue"</span>,</span><br><span class="line">            <span class="attr">"autoFix"</span>: <span class="literal">true</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"language"</span>: <span class="string">"html"</span>,</span><br><span class="line">            <span class="attr">"autoFix"</span>: <span class="literal">true</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"vue"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"eslint.options"</span>: &#123;</span><br><span class="line">        <span class="attr">"plugins"</span>: [</span><br><span class="line">            <span class="string">"html"</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"editor.tabSize"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">"prettier.eslintIntegration"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"vetur.format.defaultFormatterOptions"</span>: &#123;</span><br><span class="line">        <span class="attr">"html"</span>: <span class="string">"prettier"</span>,</span><br><span class="line">        <span class="attr">"css"</span>: <span class="string">"prettier"</span>,</span><br><span class="line">        <span class="attr">"postcss"</span>: <span class="string">"prettier"</span>,</span><br><span class="line">        <span class="attr">"scss"</span>: <span class="string">"prettier"</span>,</span><br><span class="line">        <span class="attr">"less"</span>: <span class="string">"prettier"</span>,</span><br><span class="line">        <span class="attr">"js"</span>: <span class="string">"prettier"</span>,</span><br><span class="line">        <span class="attr">"ts"</span>: <span class="string">"prettier"</span>,</span><br><span class="line">        <span class="attr">"stylus"</span>: <span class="string">"stylus-supremacy"</span>,</span><br><span class="line">        <span class="attr">"wrap_attributes"</span>: <span class="string">"force-aligned"</span>,</span><br><span class="line">        <span class="attr">"prettier"</span>: &#123;</span><br><span class="line">            <span class="attr">"semi"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">"singleQuote"</span>: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"eslint.alwaysShowStatus"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"window.titleBarStyle"</span>: <span class="string">"custom"</span>,</span><br><span class="line">    <span class="attr">"files.eol"</span>: <span class="string">"\n"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.vscode 1.29版本以上markdown-toc生成目录默认是有问题的,1.29版本以下能够直接正常使用</p><pre><code>1.29版本以上,请在file-&gt;preferences-&gt;setting-&gt;text editor中找到Eol配置的地方,设置为\n即可.详细情况见 https://github.com/AlanWalk/markdown-toc/issues/65</code></pre><p>4.vscode 1.30版本在file-&gt;preferences-&gt;setting下找不到打开setting.json文件的入口了.如下图,可以在系统路径下找到该文件编辑即可.</p><pre><code>文件路径Windows: %APPDATA%\Code\User\settings.jsonmacOS: $HOME/Library/Application Support/Code/User/settings.jsonLinux: $HOME/.config/Code/User/settings.json</code></pre><p><img src="/images/vscode.1.30.png" alt=""></p>]]></content>
      
      
      
        <tags>
            
            <tag> vscode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>axis2调用webservice</title>
      <link href="/2018/12/11/axis2%E8%B0%83%E7%94%A8webservice/"/>
      <url>/2018/12/11/axis2%E8%B0%83%E7%94%A8webservice/</url>
      
        <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#webservice一种跨编程语言和跨操作系统平台的远程调用技术">WebService:一种跨编程语言和跨操作系统平台的远程调用技术.</a></li><li><a href="#webservice的实现包有很多java语言有jdk16后内置的jwsapache-cxfapache-axisapache-axis2">WebService的实现包有很多,Java语言有jdk1.6后内置的jws.*,Apache cxf,Apache Axis,Apache Axis2.</a><ul><li><a href="#1远程调用">1.远程调用</a><ul><li><a href="#11-axis2wsdl地址方式调用">1.1 axis2+wsdl地址方式调用:</a></li><li><a href="#12-axis2endpoint地址方式调用">1.2 axis2+endpoint地址方式调用:</a></li></ul></li><li><a href="#2wsdl2java方式调用">2.wsdl2java方式调用</a></li></ul></li></ul><!-- /TOC --><h3 id="WebService-一种跨编程语言和跨操作系统平台的远程调用技术"><a href="#WebService-一种跨编程语言和跨操作系统平台的远程调用技术" class="headerlink" title="WebService:一种跨编程语言和跨操作系统平台的远程调用技术."></a>WebService:一种跨编程语言和跨操作系统平台的远程调用技术.</h3><pre><code>WebService都是基于http请求(POST请求,无GET请求)XML+XSD,SOAP和WSDL就是构成WebService平台的三大技术。XML+XSD：WebService采用HTTP协议传输数据，采用XML格式封装数据（即XML中说明调用远程服务对象的哪个方法，传递的参数是什么，以及服务对象的返回结果是什么）。XML是WebService平台中表示数据的格式。SOAP(Simple Object Access Protocol)：简单对象访问协议SOAP提供了标准的RPC方法来调用Web Service。SOAP协议 = HTTP协议 + XML数据格式SOAP协议定义了SOAP消息的格式，SOAP协议是基于HTTP协议的，SOAP也是基于XML和XSD的，XML是SOAP的数据编码方式。soap协议分1.1和1.2版本:soap1.1:  请求方式:post  content-type:text/xml;charset=utf-8soap1.2:  请求方式:post  content-type:application/soap+xmlWSDL(Web Services Description Language):基于XML的语言，用于描述Web Service及其函数、参数和返回值。它是WebService客户端和服务器端都能理解的标准格式。WSDL文件保存在Web服务器上，通过一个url地址就可以访问到它。客户端要调用一个WebService服务之前，要知道该服务的WSDL文件的地址。注:wsdl文件阅读技巧:(从下往上读)  找到wsdl:service节点-&gt;查看下面的wsdl:port节点-&gt;查看其binding属性-&gt;找到与bingding名称相同的wsdl:binding节点  -&gt;查看节点下的wsdl:operation节点(对应的调用method名称)-&gt;wsdl:input方法输入参数节点-&gt;对应message属性值  -&gt;找到同名的wsdl:message节点-&gt;wsdl:part对应的参数名称和类型.  wsdl:output节点代表服务返回的数据.阅读方式和wsdl:input一致</code></pre><p>WebService优点:跨平台跨语言.服务方和调用方不用关心各自的平台和语言</p><p>WebService缺点:在使用方式上，RPC和soap的使用在减少，Restful架构占到了主导地位。在数据格式上，XML格式繁琐,使用在减少，json等轻量级格式的使用在增多..另外性能上略低(也有专门对xml解析优化的cpu)</p><h3 id="WebService的实现包有很多-Java语言有jdk1-6后内置的jws-Apache-cxf-Apache-Axis-Apache-Axis2"><a href="#WebService的实现包有很多-Java语言有jdk1-6后内置的jws-Apache-cxf-Apache-Axis-Apache-Axis2" class="headerlink" title="WebService的实现包有很多,Java语言有jdk1.6后内置的jws.*,Apache cxf,Apache Axis,Apache Axis2."></a>WebService的实现包有很多,Java语言有jdk1.6后内置的jws.*,Apache cxf,Apache Axis,Apache Axis2.</h3><p>本文采用axis2包,发布webservice服务可以采用jdk的@WebService注解实现或者cxf/axis/axis2来进行实现,网上教程很多,本文不涉及到这块.主要是发现在调用的时候会有一些坑,所以在此记录</p><p>WebService客户端调用主要有2类方式,一种是通过http远程调用,一种是通过wsdl2java产生Java代码调用</p><h4 id="1-远程调用"><a href="#1-远程调用" class="headerlink" title="1.远程调用"></a>1.远程调用</h4><p>  引入axisjar包:<br>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Axis2 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.axis2<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>axis2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.ws.commons.axiom<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>axiom<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.ws.commons.axiom<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>axiom-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.ws.commons.axiom<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>axiom-impl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>wsdl4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>wsdl4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.ws.xmlschema<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>xmlschema-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.neethi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>neethi<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--&lt;version&gt;2.0.4&lt;/version&gt; --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.axis2<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>axis2-transport-local<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.axis2<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>axis2-transport-http<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.mail<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.mail-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Axis2 End --&gt;</span></span><br></pre></td></tr></table></figure></p><h5 id="1-1-axis2-wsdl地址方式调用"><a href="#1-1-axis2-wsdl地址方式调用" class="headerlink" title="1.1 axis2+wsdl地址方式调用:"></a>1.1 axis2+wsdl地址方式调用:</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">String soapBindingAddress = <span class="string">"http://ws.webxml.com.cn/WebServices/MobileCodeWS.asmx?wsdl"</span>;</span><br><span class="line">      EndpointReference endpointReference = <span class="keyword">new</span> EndpointReference(soapBindingAddress);</span><br><span class="line">      <span class="comment">//创建一个OMFactory</span></span><br><span class="line">      OMFactory factory = OMAbstractFactory.getOMFactory();</span><br><span class="line">      <span class="comment">//指定命名空间</span></span><br><span class="line">      OMNamespace namespace = factory.createOMNamespace(<span class="string">"http://WebXml.com.cn/"</span>, <span class="string">"web"</span>);</span><br><span class="line">      <span class="comment">//创建method对象，方法名 为getMobileCodeInfo</span></span><br><span class="line">      OMElement method = factory.createOMElement(<span class="string">"getMobileCodeInfo"</span>, namespace);</span><br><span class="line">      OMElement mobileCode = factory.createOMElement(<span class="string">"mobileCode"</span>, namespace);<span class="comment">//方法参数</span></span><br><span class="line">      OMElement userID = factory.createOMElement(<span class="string">"userID"</span>, namespace);<span class="comment">//方法参数</span></span><br><span class="line">      <span class="comment">//封装参数</span></span><br><span class="line">      mobileCode.addChild(factory.createOMText(mobileCode, <span class="string">"18265963256"</span>));<span class="comment">//设定参数的值</span></span><br><span class="line">      method.addChild(mobileCode);</span><br><span class="line">      userID.addChild(factory.createOMText(userID, <span class="string">""</span>));<span class="comment">//设定参数的值</span></span><br><span class="line">      method.addChild(userID);</span><br><span class="line">      <span class="comment">//请求参数设置</span></span><br><span class="line">      ServiceClient sender = <span class="keyword">new</span> ServiceClient();</span><br><span class="line">      Options options = <span class="keyword">new</span> Options();</span><br><span class="line">      <span class="comment">// 设置soap1.2协议</span></span><br><span class="line">      options.setSoapVersionURI(SOAP12Constants.SOAP_ENVELOPE_NAMESPACE_URI);</span><br><span class="line">      options.setAction(<span class="string">"http://WebXml.com.cn/getMobileCodeInfo"</span>);</span><br><span class="line">      options.setTo(endpointReference);</span><br><span class="line">      sender.setOptions(options);</span><br><span class="line">      OMElement result = sender.sendReceive(method);</span><br><span class="line">      System.out.println(result.getFirstElement().getText());</span><br></pre></td></tr></table></figure><h5 id="1-2-axis2-endpoint地址方式调用"><a href="#1-2-axis2-endpoint地址方式调用" class="headerlink" title="1.2 axis2+endpoint地址方式调用:"></a>1.2 axis2+endpoint地址方式调用:</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">ServiceClient client = <span class="keyword">new</span> ServiceClient();</span><br><span class="line">      <span class="comment">// 创建服务地址WebService的URL,注意不是WSDL的URL</span></span><br><span class="line">      String url = <span class="string">"http://ws.webxml.com.cn/WebServices/MobileCodeWS.asmx"</span>;</span><br><span class="line">      EndpointReference targetEPR = <span class="keyword">new</span> EndpointReference(url);</span><br><span class="line">      Options options = client.getOptions();</span><br><span class="line">      <span class="comment">// 设置soap1.2协议</span></span><br><span class="line">      options.setSoapVersionURI(SOAP12Constants.SOAP_ENVELOPE_NAMESPACE_URI);</span><br><span class="line">      options.setTo(targetEPR);</span><br><span class="line">      <span class="comment">// 确定调用方法（wsdl 命名空间地址 (wsdl文档中的targetNamespace) 和 方法名称 的组合）</span></span><br><span class="line">      options.setAction(<span class="string">"http://WebXml.com.cn/getMobileCodeInfo"</span>);</span><br><span class="line">      OMFactory fac = OMAbstractFactory.getOMFactory();</span><br><span class="line">      <span class="comment">/*</span></span><br><span class="line"><span class="comment">       * 指定命名空间，参数： uri--即为wsdl文档的targetNamespace，命名空间 perfix--可不填</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      OMNamespace omNs = fac.createOMNamespace(<span class="string">"http://WebXml.com.cn/"</span>, <span class="string">""</span>);</span><br><span class="line">      <span class="comment">/*</span></span><br><span class="line"><span class="comment">       * 身份验证</span></span><br><span class="line"><span class="comment">       * OMElement header = fac.createOMElement("AuthenticationToken", omNs);</span></span><br><span class="line"><span class="comment">       * OMElement ome_user = fac.createOMElement("Username", omNs); OMElement</span></span><br><span class="line"><span class="comment">       * ome_pass = fac.createOMElement("Password", omNs);</span></span><br><span class="line"><span class="comment">       *</span></span><br><span class="line"><span class="comment">       * ome_user.setText("user"); ome_pass.setText("pass");</span></span><br><span class="line"><span class="comment">       *</span></span><br><span class="line"><span class="comment">       * header.addChild(ome_user); header.addChild(ome_pass);</span></span><br><span class="line"><span class="comment">       *</span></span><br><span class="line"><span class="comment">       * client.addHeader(header);</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      <span class="comment">// 指定方法</span></span><br><span class="line">      OMElement method = fac.createOMElement(<span class="string">"getMobileCodeInfo"</span>, omNs);</span><br><span class="line">      <span class="comment">// 指定方法的参数</span></span><br><span class="line">      OMElement mobileCode = fac.createOMElement(<span class="string">"mobileCode"</span>, omNs);</span><br><span class="line">      mobileCode.setText(<span class="string">"18265963256"</span>);</span><br><span class="line">      OMElement userID = fac.createOMElement(<span class="string">"userID"</span>, omNs);</span><br><span class="line">      userID.setText(<span class="string">""</span>);</span><br><span class="line">      method.addChild(mobileCode);</span><br><span class="line">      method.addChild(userID);</span><br><span class="line">      method.build();</span><br><span class="line">      <span class="comment">// 远程调用web服务</span></span><br><span class="line">      OMElement result = client.sendReceive(method);</span><br><span class="line">      System.out.println(result);</span><br></pre></td></tr></table></figure><pre><code>注:返回的xml数据可能含有需要转义的字符,比如&amp;lt;之类的.可以用org.apache.commons.lang3.StringEscapeUtils.unescapeXml方法处理,(已过时),可以用commons-text包下的StringEscapeUtils类进行反转义处理</code></pre><h4 id="2-wsdl2java方式调用"><a href="#2-wsdl2java方式调用" class="headerlink" title="2.wsdl2java方式调用"></a>2.wsdl2java方式调用</h4><p>  使用jdk命令行下的wsimport命令和wsdl文件生成生成客户端中间代码,</p><p>  注意:只能编译soap1.1的协议，不能编译soap1.2的协议的代码</p><pre><code>wsimport [options] &lt;WSDL_URI&gt;比较常用的[options]有：1. -d &lt;directory&gt;  在指定的目录生成class文件2. -clientjar &lt;jarfile&gt;  在当前目录生成jar文件，结合-d &lt;directory&gt;可以在指定的目录生成jar文件3. -s &lt;directory&gt;  在指定的目录生成java源文件4. -p &lt;pkg&gt;  指定生成文件的包结构5. -keep  在生成class文件，或者jar包时，同时保留java源文件</code></pre><p>例:在当前目录新建class文件夹和java文件夹,分别存放对应的class文件个java文件</p><pre><code>wsimport -keep -d ./class -s ./java -p com.test.demo -verbose http://ws.webxml.com.cn/WebServices/MobileCodeWS.asmx?wsdl  </code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建一个MobileCodeWS工厂  </span></span><br><span class="line">MobileCodeWS factory = <span class="keyword">new</span> MobileCodeWS();  </span><br><span class="line"><span class="comment">//根据工厂创建一个MobileCodeWSSoap对象  </span></span><br><span class="line">MobileCodeWSSoap mobileCodeWSSoap = factory.getMobileCodeWSSoap();  </span><br><span class="line"><span class="comment">//调用WebService提供的getMobileCodeInfo方法查询手机号码的归属地  </span></span><br><span class="line">String searchResult = mobileCodeWSSoap.getMobileCodeInfo(<span class="string">"18265963256"</span>, <span class="keyword">null</span>);  </span><br><span class="line">System.out.println(searchResult);</span><br></pre></td></tr></table></figure><p>笔后摘要:</p><p>webservice既然是基于http的,那么也可使用最原始的URLconnect来进行访问请求处理,但是要注意对应的soap协议版本请求头,还需要组装符合soap协议xml文档信息等.完整的请求头应该和下例类似:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">  请求头:</span><br><span class="line">  POST /WebServices/MobileCodeWS.asmx HTTP/1.1</span><br><span class="line">  Host: webservice.webxml.com.cn</span><br><span class="line">  Content-Type: text/xml; charset=utf-8</span><br><span class="line">  Content-Length: length</span><br><span class="line">  SOAPAction: "http://WebXml.com.cn/getMobileCodeInfo"</span><br><span class="line"></span><br><span class="line">消息体:</span><br><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">soap:Envelope</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:xsd</span>=<span class="string">"http://www.w3.org/2001/XMLSchema"</span> <span class="attr">xmlns:soap</span>=<span class="string">"http://schemas.xmlsoap.org/soap/envelope/"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">soap:Body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">getMobileCodeInfo</span> <span class="attr">xmlns</span>=<span class="string">"http://WebXml.com.cn/"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mobileCode</span>&gt;</span>18265963256<span class="tag">&lt;/<span class="name">mobileCode</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">userID</span>&gt;</span>string<span class="tag">&lt;/<span class="name">userID</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">getMobileCodeInfo</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">soap:Body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">soap:Envelope</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> axis2 </tag>
            
            <tag> WebService </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>debian系系统编译CuraEngine引擎</title>
      <link href="/2018/09/05/debian%E7%B3%BB%E7%B3%BB%E7%BB%9F%E7%BC%96%E8%AF%91CuraEngine%E5%BC%95%E6%93%8E/"/>
      <url>/2018/09/05/debian%E7%B3%BB%E7%B3%BB%E7%BB%9F%E7%BC%96%E8%AF%91CuraEngine%E5%BC%95%E6%93%8E/</url>
      
        <content type="html"><![CDATA[<pre><code>摘要:CuraEngine是一个功能强大、快速、强劲的3D模型切片引擎.Cura就是采用了CuraEngine引擎的.本文的操作环境为deepin 15.7,编译CuraEngine的版本为2.4</code></pre><p>1.安装cmake</p><pre><code>sudo apt install cmake</code></pre><p>2.安装Protobuf &gt;= 3.0.0 </p><p>  2.1 安装libtool</p><pre><code>sudo apt install libtool</code></pre><p>  2.2 安装autoconf</p><pre><code>sudo apt install autoconf</code></pre><p>  2.3 clone代码,–depth=1.clone最近一次提交的,可以减少clone时间</p><pre><code>git clone https://github.com/protocolbuffers/protobuf.git --depth=1</code></pre><p>  2.4 进入到protobuf目录.执行</p><pre><code>./autogen.sh</code></pre><p>  2.5 </p><pre><code>./configure</code></pre><p>  2.6 </p><pre><code>make </code></pre><p>  2.7 </p><pre><code>sudo make install</code></pre><p>3.安装libArcus</p><p>  3.1 安装python3-dev</p><pre><code>sudo apt install python3-dev</code></pre><p>  3.2 安装python3-sip-dev</p><pre><code>sudo apt install python3-sip-dev</code></pre><p>  3.3 安装libprotobuf-dev</p><pre><code>sudo apt install libprotobuf-dev</code></pre><p>  3.4 clone代码</p><pre><code>git clone https://github.com/Ultimaker/libArcus.git --depth=1</code></pre><p>  3.5 进入到libArcus目录,执行</p><pre><code>mkdir build &amp;&amp; cd buildcmake ..</code></pre><p>  3.6 </p><pre><code>make</code></pre><p>  3.7 </p><pre><code>sudo make install</code></pre><p>4.编译CuraEngine</p><p>  4.1 clone代码.此处编译2.4版本,-b指定版本</p><pre><code>git clone https://github.com/Ultimaker/CuraEngine.git -b 2.4 --depth=1</code></pre><p>  4.2 </p><pre><code>mkdir build &amp;&amp; cd build</code></pre><p>  4.3 </p><pre><code>cmake ..</code></pre><p>  4.4 </p><pre><code>make</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>远程tomcat配置jconsole连接监测jvm参数</title>
      <link href="/2018/08/20/%E8%BF%9C%E7%A8%8Btomcat%E9%85%8D%E7%BD%AEjconsole%E8%BF%9E%E6%8E%A5%E7%9B%91%E6%B5%8Bjvm%E5%8F%82%E6%95%B0/"/>
      <url>/2018/08/20/%E8%BF%9C%E7%A8%8Btomcat%E9%85%8D%E7%BD%AEjconsole%E8%BF%9E%E6%8E%A5%E7%9B%91%E6%B5%8Bjvm%E5%8F%82%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<pre><code>摘要:  jconsole是Java 自带性能监控工具，监视和管理控制台 jconsole，它可以提供 Java 某个进程的内存、线程、类加载、  jvm 概要以及 MBean 等的实时信息.  Jvisualvm是jdk1.6 update 7 才有，是jconsole的升级工具，功能更强大，最大好处是支持插件安装。所以Jvisualvm远程  JMX连接方式和jconsole远程连接方式一样</code></pre><p>1.在tomcat的bin目录下catalina.sh文件首部增加以下配置(注意:不用换行)</p><pre><code>CATALINA_OPTS=&quot;-Dfile.encoding=UTF-8 -server -Xms256m -Xmx256m -Djava.rmi.server.hostname=0.0.0.0 -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=10001 -Dcom.sun.management.jmxremote.rmi.port=10001 -Dcom.sun.management.jmxremote.authenticate=true -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.password.file=./conf/jmxremote.password -Dcom.sun.management.jmxremote.access.file=./conf/jmxremote.access&quot;其中-Xms256m -Xmx256m是配置jvm虚拟机参数的,最小堆内存和最大堆内存,推荐保持一致,如果不一致会增加gc回收次数,对性能有严重影响.-Djava.rmi.server.hostname:本机的ip地址,可设置为0.0.0.0-Dcom.sun.management.jmxremote.port:监控的端口.不能和其他运行的端口相冲突-Dcom.sun.management.jmxremote.authenticate:需要授权才能进行连接-Dcom.sun.management.jmxremote.password.file:指定配置授权的密码文件存放位置,推荐放入到tomcat的conf目录下-Dcom.sun.management.jmxremote.access.file:指定配置授权账户的权限的文件存放位置,推荐放入到tomcat的conf目录下</code></pre><p>2.在tomcat的bin目录下startup.sh文件首部增加以下配置</p><pre><code>JAVA_OPTS=&quot;-Djava.rmi.server.hostname=0.0.0.0&quot;</code></pre><p>3.启动本地的jconsole即可,输入远程ip和端口,username和password即可连接</p><p>注意:</p><pre><code>1.配置授权的2个文件是在系统的%JAVA_HOME%/jre/lib/management目录下可以找到对应的模板.将其复制到tomcat的conf目录下,并将jmxremote.password.template重命名为jmxremote.password2.jmxremote.access用户权限分readonly和readwrite两种，在jmxremote.access尾部添加用户权限&quot;admin  readwrite&quot;,其中admin代表远程授权的用户名3.在jmxremote.password尾部添加用户密码&quot;admin 123456&quot;其中admin代表用户名,123456代表对应的密码4.对jmxremote.access和jmxremote.password文件进行授权,chmod 600  jmxremote.access和chmod 600 jmxremote.password5.针对为什么在startup.sh文件中增加对应的-Djava.rmi.server.hostname=0.0.0.0配置,主要是因为在不加配置的情况下,用shutdown.sh关闭tomcat的时候会报该端口已经被占用,因为关闭tomcat时候，还会读取catalina.sh.所以推荐在startup.sh文件中配置6.一般情况下远程服务器系统是开启防火墙的,所以还需要将10001端口配置为允许访问7.如果配置一切无误,还是连接不上的话,请将0.0.0.0换成对应的IP地址.因为亲测在Ubuntu下0.0.0.0能连接成功,但是在centos7下连接不成功</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> tomcat </tag>
            
            <tag> jconsole </tag>
            
            <tag> jvm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux系统之间远程连接和传输文件</title>
      <link href="/2018/08/07/linux%E7%B3%BB%E7%BB%9F%E4%B9%8B%E9%97%B4%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E5%92%8C%E4%BC%A0%E8%BE%93%E6%96%87%E4%BB%B6/"/>
      <url>/2018/08/07/linux%E7%B3%BB%E7%BB%9F%E4%B9%8B%E9%97%B4%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E5%92%8C%E4%BC%A0%E8%BE%93%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<pre><code>&gt;摘要: 1.Windows与Windows系统之间可以开启远程桌面连接实现远程控制和传输文件,也可以搭建ftp服务器然后通过ftp客户端(例如:fileZilla)来实现.2.从Windows到Linux,可以使用xshell等工具来实现远程连接.然后使用winscp等工具实现文件传输.当然在Linux上搭建ftp服务器,然后用ftp客户端连接也可3.从Linux(桌面版,server版一般没必要)到Windows.可以使用remmina工具来远程连接Windows进行连接操作.文件拷贝推荐在Windows上搭建ftpserver(fileZilla-server),然后使用fileZilla client连接传输文件. 注:fileZilla跨平台的.占用资源少,操作方便.简直神器~4.另外一种方式就是不分双方的操作系统.只要在对应的机器上安装对应的一些工具,比如teamviewer等.也可实现远程连接和文件传输.5.Linux到Linux之间通常是桌面端到server端的操作,有时候为了方便或者为了减少服务器资源占用,server端不需要安装额外的一些工具等,这时推荐使用Linux下的ssh和scp命令进行操作(大力推荐~)</code></pre><h2 id="1-ssh命令"><a href="#1-ssh命令" class="headerlink" title="1.ssh命令"></a>1.ssh命令</h2><p>  简单说，SSH是一种网络协议，用于计算机之间的加密登录。如果一个用户从本地计算机，使用SSH协议登录另一台远程计算机，我们就可以认为，这种登录是安全的，即使被中途截获，密码也不会泄露.SSH只是一种协议，存在多种实现，既有商业实现，也有开源实现。本文针对的实现是OpenSSH(linux一般自带)，它是自由软件，应用非常广泛.注:ssh协议默认端口一般是22</p><pre><code>ssh -V 查看当前安装的ssh版本</code></pre><p>1.1 连接到远程主机方式1</p><pre><code>ssh username@serverAddress username是登录远程主机的用户名,serverAddress远程主机地址</code></pre><p>1.2 连接到远程主机方式2</p><pre><code>ssh serverAddress -l username -p 22 serverAddress远程主机地址,可以是一个域名地址或者ip地址,username是登录远程主机的用户名, -p 指定远程服务端ssh协议开放的端口.</code></pre><h2 id="2-scp命令"><a href="#2-scp命令" class="headerlink" title="2.scp命令"></a>2.scp命令</h2><pre><code>scp用于实现在Linux server端和Linux客户端实现文件传输</code></pre><p>2.1 上传文件到服务器端,注:是文件,不是文件夹</p><pre><code>scp ./test.js root@192.168.1.106:/var/www/ #将本地当前目录下的test.js文件上传到192.168.1.106的/var/www/目录下.root登录远程及其的用户名.</code></pre><p>2.2 上传文件夹(目录)到服务器端</p><pre><code>scp -r ./test/ root@192.168.1.106:/var/www/ #将本地当前目录下的test目录上传到192.168.1.106的/var/www/目录下.-r参数代表上传目录</code></pre><p>2.3 从服务器上下载文件</p><pre><code>scp root@192.168.1.106:/var/www/test.js /home/ #将服务器/var/www/目录下的test.js文件下载到本地的home目录下</code></pre><p>2.4 从服务器下载整个目录</p><pre><code>scp -r root@192.168.1.106:/var/www/test/ /home/ #将服务器上的/var/www/test/目录下载到本地的home目录下-r参数代表目录</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL新版本设置root密码和重置root密码</title>
      <link href="/2018/08/03/MySQL%E6%96%B0%E7%89%88%E6%9C%AC%E8%AE%BE%E7%BD%AEroot%E5%AF%86%E7%A0%81%E5%92%8C%E9%87%8D%E7%BD%AEroot%E5%AF%86%E7%A0%81/"/>
      <url>/2018/08/03/MySQL%E6%96%B0%E7%89%88%E6%9C%AC%E8%AE%BE%E7%BD%AEroot%E5%AF%86%E7%A0%81%E5%92%8C%E9%87%8D%E7%BD%AEroot%E5%AF%86%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<pre><code>&gt; 摘要:最近在虚拟机上安装Ubuntu18.04版本,然后安装MySQL-server.安装MySQL-server过程中不再像之前会提示输入root账户的密码.所以需要进行对root账户设置密码,&gt;操作环境:    OS:Ubuntu 18.04    MySQL版本:5.7及更高</code></pre><h3 id="1-前置条件"><a href="#1-前置条件" class="headerlink" title="1.前置条件"></a>1.前置条件</h3><pre><code>需要系统的root账户或者使用sudo 命令</code></pre><h3 id="2-使用mysql-secure-installation进行对密码设置"><a href="#2-使用mysql-secure-installation进行对密码设置" class="headerlink" title="2.使用mysql_secure_installation进行对密码设置"></a>2.使用mysql_secure_installation进行对密码设置</h3><pre><code>如果是第一次安装完MySQL后,可以使用:sudo mysql_secure_installation  对root账户进行设置密码操作</code></pre><h3 id="3-使用skip-grant-tables对root账户进行重置密码的操作"><a href="#3-使用skip-grant-tables对root账户进行重置密码的操作" class="headerlink" title="3.使用skip-grant-tables对root账户进行重置密码的操作"></a>3.使用skip-grant-tables对root账户进行重置密码的操作</h3><pre><code>3.1 停止当前正在运行的mysql服务    sudo service mysql stop3.2 创建/var/run/mysqld目录,因为MySQL进程在启动和运行的时候都需要访问该soket文件    sudo mkdir -p /var/run/mysqld    sudo chown mysql:mysql /var/run/mysqld3.3 使用skip-grant-tables启动服务程序    sudo /usr/sbin/mysqld --skip-grant-tables --skip-networking &amp;    jobs 然后确认下服务是否启动成功3.4 使用root无密码登录,进行修改设置密码操作    mysql -u root root无密码登录    FLUSH PRIVILEGES; 刷新一遍授权信息    USE mysql; 切换到mysql库(安装好后自带的)    UPDATE user SET authentication_string=PASSWORD(&quot;123456&quot;) WHERE User=&apos;root&apos;; 设置密码字段的新密码,    authentication_string是新版本存储密码的字段名,旧版本的是password.    UPDATE user SET plugin=&quot;mysql_native_password&quot; WHERE User=&apos;root&apos;;    FLUSH PRIVILEGES;    quit;3.5 重启MySQL服务    sudo pkill mysqld  停掉之前启动的服务    jobs 查看是否正确停止服务    sudo service mysql start 启动MySQL服务3.6 使用root账户和刚设置的密码进行登录操作    mysql -u root --password=123456  使用root和密码登录</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>atom配置vue前端开发环境</title>
      <link href="/2018/06/25/atom%E9%85%8D%E7%BD%AEvue%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
      <url>/2018/06/25/atom%E9%85%8D%E7%BD%AEvue%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<pre><code>摘要:  使用atom配置前端vue开发环境</code></pre><p>1.安装好atom后,安装常用的几个插件</p><pre><code>prettier-atom : 格式化代码插件atom-axios : vue-axios提示插件autoclose-html : 自定补全闭合html标签插件file-icons : 文件图标,便利区分不同类型的文件autocomplete-paths : 自动提示补全文件路径插件language-vue : atom支持vue的插件language-vue-component : 高亮显示vue组件插件vue2-autocomplete : vue2.0+提示插件linter-eslint : eslint规则校验插件px2rem-plus : px转rem插件minimap : 在编辑器右边出现预览源代码(类似sublime text3右侧预览导航效果)的插件下面是支持markdown的插件:markdown-toc : 对markdown文档生成目录的插件markdown-table-editor : markdown文档表格编辑插件</code></pre><p>2.安装好对应的插件后,大部分情况能够使用,但是vue项目需要支持eslint校验的话,需要对linter-eslint设置下面的 Lint-HTML-Files进行勾选</p><p><img src="/images/eslint.png" alt=""></p><p>3.默认的prettier格式化的规则是不符合eslint的,比如会对每行尾部增加分号,单引号变变为双引号,需要修改其配置为下:</p><p><img src="/images/prettier.png" alt=""></p>]]></content>
      
      
      
        <tags>
            
            <tag> atom </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java实现图片的灰度化处理</title>
      <link href="/2018/06/12/java%E5%AE%9E%E7%8E%B0%E5%9B%BE%E7%89%87%E7%9A%84%E7%81%B0%E5%BA%A6%E5%8C%96%E5%A4%84%E7%90%86/"/>
      <url>/2018/06/12/java%E5%AE%9E%E7%8E%B0%E5%9B%BE%E7%89%87%E7%9A%84%E7%81%B0%E5%BA%A6%E5%8C%96%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<pre><code>摘要:24位彩色图与8位灰度图在一个24位彩色图像中，每个像素由三个字节表示，通常表示为RGB。通常，许多24位彩色图像存储为32位图像，每个像素多余的字节存储为一个alpha值，表现有特殊影响的信息在RGB模型中，如果R=G=B时，则彩色表示一种灰度颜色，其中R=G=B的值叫灰度值，因此，灰度图像每个像素只需一个字节存放灰度值（又称强度值、亮度值），灰度范围为0-255.这样就得到一幅图片的灰度图</code></pre><p>常见的几种灰度化的方法:</p><pre><code>分量法：使用RGB三个分量中的一个作为灰度图的灰度值。最值法：使用RGB三个分量中最大值或最小值作为灰度图的灰度值。均值法：使用RGB三个分量的平均值作为灰度图的灰度值。加权法：由于人眼颜色敏感度不同，按下一定的权值对RGB三分量进行加权平均能得到较合理的灰度图像。一般情况按照：Y = 0.30R + 0.59G + 0.11B.加权法实际上是取一幅图片的亮度值人眼对绿色的敏感最高，对蓝色敏感最低 ）作为灰度值来计算，用到了YUV模型</code></pre><p>java编码实现图片灰度化</p><p>1.强制设置灰度化的方法（效果相对就差）</p><pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 图片灰化（效果不行，不建议。据说：搜索“Java实现灰度化”，十有八九都是一种方法）</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> bufferedImage 待处理图片</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> BufferedImage <span class="title">grayImage</span><span class="params">(BufferedImage bufferedImage)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> width = bufferedImage.getWidth();  </span><br><span class="line">    <span class="keyword">int</span> height = bufferedImage.getHeight();  </span><br><span class="line"></span><br><span class="line">    BufferedImage grayBufferedImage = <span class="keyword">new</span> BufferedImage(width, height,</span><br><span class="line">                                    BufferedImage.TYPE_BYTE_GRAY);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; width; x++) &#123;  </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> y = <span class="number">0</span> ; y &lt; height; y++) &#123;  </span><br><span class="line">        grayBufferedImage.setRGB(x, y, bufferedImage.getRGB(x, j));  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><p>2.加权法灰度化（效果较好）</p><pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 图片灰化（参考：http://www.codeceo.com/article/java-image-gray.html）</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> bufferedImage 待处理图片</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> BufferedImage <span class="title">grayImage</span><span class="params">(BufferedImage bufferedImage)</span> <span class="keyword">throws</span></span></span><br><span class="line"><span class="function">  Exception </span>&#123;</span><br><span class="line"><span class="keyword">int</span> width = bufferedImage.getWidth();</span><br><span class="line"><span class="keyword">int</span> height = bufferedImage.getHeight();</span><br><span class="line">BufferedImage grayBufferedImage = <span class="keyword">new</span> BufferedImage(width, height,</span><br><span class="line">                                    BufferedImage.TYPE_BYTE_GRAY);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; width; x++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; height; y++) &#123;</span><br><span class="line"><span class="comment">// 计算灰度值</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> color = bufferedImage.getRGB(x, y);</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> r = (color &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>;</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> g = (color &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xff</span>;</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> b = color &amp; <span class="number">0xff</span>;</span><br><span class="line"><span class="keyword">int</span> gray = (<span class="keyword">int</span>) (<span class="number">0.3</span> * r + <span class="number">0.59</span> * g + <span class="number">0.11</span> * b);</span><br><span class="line"><span class="keyword">int</span> newPixel = colorToRGB(<span class="number">255</span>, gray, gray, gray);</span><br><span class="line">grayBufferedImage.setRGB(x, y, newPixel);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> grayBufferedImage;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 颜色分量转换为RGB值</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> alpha</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> red</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> green</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> blue</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">colorToRGB</span><span class="params">(<span class="keyword">int</span> alpha, <span class="keyword">int</span> red, <span class="keyword">int</span> green, <span class="keyword">int</span> blue)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> newPixel = <span class="number">0</span>;</span><br><span class="line">newPixel += alpha;</span><br><span class="line">newPixel = newPixel &lt;&lt; <span class="number">8</span>;</span><br><span class="line">newPixel += red;</span><br><span class="line">newPixel = newPixel &lt;&lt; <span class="number">8</span>;</span><br><span class="line">newPixel += green;</span><br><span class="line">newPixel = newPixel &lt;&lt; <span class="number">8</span>;</span><br><span class="line">newPixel += blue;</span><br><span class="line"><span class="keyword">return</span> newPixel;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL设置用户远程登录</title>
      <link href="/2018/06/12/MySQL%E8%AE%BE%E7%BD%AE%E7%94%A8%E6%88%B7%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95/"/>
      <url>/2018/06/12/MySQL%E8%AE%BE%E7%BD%AE%E7%94%A8%E6%88%B7%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<pre><code>摘要:在Linux(debian)下,通过apt install mysql-server后,输入root账户密码后,默认是不允许远程登录的.可以用过以下几种方式来设置允许能够远程登录</code></pre><p>1.改mysql库下的user表的数据</p><pre><code>mysql -u root –pmysql&gt;use mysql;mysql&gt;update user set host = &apos;%&apos; where user = &apos;root&apos;;mysql&gt;select host, user from user;</code></pre><p>2.通过授权的方式,这种方式可以对不同的用户设置不同的访问权限</p><pre><code>#例如: 在MySQL服务器主机上执行,允许root使用123456从任何主机连接到mysql服务器mysql&gt;GRANT ALL PRIVILEGES ON *.* TO &apos;root&apos;@&apos;%&apos; IDENTIFIED BY &apos;123456&apos; WITH GRANT OPTION;mysql&gt;FLUSH PRIVILEGES; # 刷新权限,使配置生效#例如:允许用户test从ip为120.77.163.89的主机连接到mysql服务器，并使用123456作为密码mysql&gt;GRANT ALL PRIVILEGES ON *.* TO &apos;test&apos;@’120.77.163.89’ IDENTIFIED BY &apos;654321&apos; WITH GRANT OPTION;mysql&gt;FLUSH PRIVILEGES; # 刷新权限,使配置生效</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shell基础</title>
      <link href="/2018/05/20/Shell%E5%9F%BA%E7%A1%80/"/>
      <url>/2018/05/20/Shell%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<pre><code>摘要:  Shell是一个命令行解释器,它为用户提供了一个向Linux内核  发送请求以便运行程序的界面系统级程序.用户可以用Shell来启动,挂起,  停止甚至是编写一些程序.  Shell还是一个功能相当强大的编程语言.易编写,意调试,灵活性较强.  Shell是解释执行的语言,在Shell中可以直接调用Linux系统命令.</code></pre><h4 id="1-脚本的执行方式"><a href="#1-脚本的执行方式" class="headerlink" title="1.脚本的执行方式"></a>1.脚本的执行方式</h4><pre><code>1. echo 输出命令    echo [选项] [输出内容]    选项:      -e : 支持反斜杠控制的字符转换2. 编写第一个脚本  vim hello.sh  #!/bin/bash  # this is hello program!  echo &quot;hello&quot;3. 脚本执行  1.赋予执行权限      chmod 755 ./hello.sh    ./hello.sh  2.通过bash调用执行脚本    bash ./hello.sh  3.使用sh命令执行    sh ./hello.sh</code></pre><h4 id="2-Bash的基本功能"><a href="#2-Bash的基本功能" class="headerlink" title="2.Bash的基本功能"></a>2.Bash的基本功能</h4><pre><code>1. 命令的别名,很多泛指为Linux下的命令,其实本质是属于Bash  `alias` 查看系统中所有的命令的别名2. 设置命令别名  alias 别名= &apos;原命令&apos;  alias ll=&apos;ls -l&apos;  #给ls -l 设置别名ll  以上设置别名的方式只是当次有效,系统重启后无效.要设置别名永久有效,  可以写入环境变量中  vim ~/.bashrc  alias ll=&apos;ls -l&apos;  保存,执行source ~/.bashrc即可3. 删除别名  unalias 别名  unalias ll  unalias是删除临时别名的,永久生效的别名需要删除环境变量中的配置4. 命令的生效顺序  第一顺位执行用绝对路径或者相对路径的命令  第二顺位执行别名  第三顺位执行Bash的内部命令  第四顺位执行按照$PATH环境变量定义的目录查找顺序找到的第一个命令  注:因为别名的执行顺序是高于$PATH下的命令的,  所以一般情况下请勿将别名设为与其他原始命令相同的命令.</code></pre><h4 id="3-Shell编程之Bash变量"><a href="#3-Shell编程之Bash变量" class="headerlink" title="3.Shell编程之Bash变量"></a>3.Shell编程之Bash变量</h4><p>  Shell中,所有变量默认都是字符串类型</p><ol><li><p>用户自定义变量  变量名=变量值(等号2边不能有空格)</p><p>用户自己定义的变量,变量名和值可随意更改</p><p>name=”zhangsan”</p><p>echo $name #显示name的值</p><p>1.1 变量叠加</p><p> name=”$name”isaname</p><p>1.2  删除变量(释放变量的内存地址) unset 变量名</p></li><li><p>环境变量</p><p>环境变量是全局变量,用户可更改值,不能更改名称</p></li><li><p>位置参数变量</p><p>$n :n为数字,$0代表命令本身.$1-$9代表第1-第9个参数,10以上的参数需要用大括号包含,如${10}</p><p>例:vim sum.sh</p><p> `#!/bin/bash</p><p>   num1=$1</p><p>   num2=$2</p><p>   sum=$(($num1+$num2))</p><p>   #变量sum的和是num1+num2</p><p>   echo $sum`</p><p>   执行;./sum.sh 10 20  #./sum.sh是$0,10是$1,20是$2</p><p>   结果:30</p><p>$<em> : 这个变量代表命令行中中所有的参数,$</em> 把所有的参数看成一个整体</p><p>$@ : 这个变量也代表命令行中所有的参数,不过$@ 是把每个参数区分对待</p><p>@# : 这个变量代表命令行中所有参数的个数</p><p>例:vim /demo.sh</p><p>`#!/bin/bash</p><p>echo “参数是: $* “</p><p>echo “参数也是: $@ “</p><p>echo “参数个数是: $#”`</p><p>执行;./demo.sh 11 22 33</p><p>结果:参数是: 11 22 33 参数也是: 11 22 33 参数个数是: 3</p><p>$* 和 $@ 区别</p><p>vim ./demo.sh</p><p>#!/bin/bash</p><p>`for i in “$*”</p><p>#$* 把所有的参数看成一个整体,所以执行循环1次</p><p> do</p><p>   echo “参数是: $i”</p><p> done</p><p>for y in “$@”</p><p>#$@ 是把每个参数区分对待,所有有几个参数就循环几次</p><p> do</p><p>   echo “参数是: $y”</p><p> done<br>`</p></li><li><p>预定义变量</p><p>$? : 最后依次执行的命令的返回结果,如果返回是0,代表上一个命令执行成功,如果返回是非0,代表上一个命令执行失败</p><p>$$ : 返回当前进程的PID号</p><p>$! : 后台运行的最后一个进程的进程号(PID)</p></li><li><p>接收键盘输入:read 命令</p><p>read [选项] [变量名]</p><p>选项</p><p> -p “提示信息”:在等待read输入时,输出提示信息</p><p> -t 秒数: read命令会一直等待用户输入,输入次选项可以指定用户等待时间</p><p> -n 字符数: read命令只接受指定的字符数,就会执行</p><p> -s : 隐藏输入的数据,适用于输入密码等情况</p></li></ol><h4 id="4-Shell编程之运算符"><a href="#4-Shell编程之运算符" class="headerlink" title="4.Shell编程之运算符"></a>4.Shell编程之运算符</h4><pre><code>1. declare命令  declare声明变量类型  declare [+/-] [选项] 变量名    选项:用-给变量设定类型属性,用+取消变量的类型属性  常见选项类型    -a 将变量声明为数组类型    -i 将变量声明为整形    -x 将变量声明为环境变量    -r 将变量声明为只读变量(设置为只读属性后,不能对变量进行删除,修改,取消属性的操作)    -p 查看显示指定变量的被声明的类型2. 数值运算的方法  方法1:  [root@localhost~]# aa=11  [root@localhost~]# bb=22  [root@localhost~]# declare -i cc=$aa+$bb  方法2:    expr或者let数值运算工具    [root@localhost~]# aa=11    [root@localhost~]# bb=22    [root@localhost~]# dd=$(expr $aa + $bb)    #dd的值是aa和bb的和,注意:&quot;+&quot;号两侧必须有空格  方法3:    &quot;$(())&quot;或&quot;$[运算式]&quot;    [root@localhost~]# aa=11    [root@localhost~]# bb=22    [root@localhost~]# cc=$(($aa + $bb))    [root@localhost~]# gg=$[$aa + $bb]3. 变量测试(只是针对Shell,其他常用不适用.一般不常用,对脚本进行优化的时候才使用)</code></pre><h4 id="5-Shell编程之环境变量配置文件"><a href="#5-Shell编程之环境变量配置文件" class="headerlink" title="5.Shell编程之环境变量配置文件"></a>5.Shell编程之环境变量配置文件</h4><pre><code>`/etc/profile/etc/profile.d/*.sh/etc/bashrc~/.bashrc~/.bash_profile`/etc目录下的是系统环境变量文件,~目录下的是当前用户的环境变量配置文件</code></pre><h4 id="6-Shell编程之正则表达式"><a href="#6-Shell编程之正则表达式" class="headerlink" title="6.Shell编程之正则表达式"></a>6.Shell编程之正则表达式</h4><pre><code>正则表达式主要是用于描述字符排列和匹配模式d额一种语法规则，主要用于字符串的模式分割,匹配,查找及替换操作</code></pre><p>  1.正则表达式与通配符</p><pre><code>通配符：  *：匹配任意内容  ?：匹配任意一个内容  []：匹配括号中的一个字符.</code></pre><p>  正则表达式用来在文件中匹配符合条件的字符串,正则是包含匹配.<br>  grep,awk,sed等命令可以支持正则表达式.</p><p>  通配符用来匹配符合条件的文件名,通配符是完全匹配.<br>  ls,find,cp这些命令不支持正则表达式,所以只能使用shell的通配符匹配.</p><h4 id="基础正则表达式"><a href="#基础正则表达式" class="headerlink" title="基础正则表达式:"></a>基础正则表达式:</h4><table><thead><tr><th>元字符</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td>*</td><td style="text-align:center">前一个字符匹配0次或者任意多次</td></tr><tr><td>.</td><td style="text-align:center">匹配除了换行符以外的任意一个字符</td></tr><tr><td>^</td><td style="text-align:center">匹配行首.例如:^hello匹配以hello开头的行</td></tr><tr><td>$</td><td style="text-align:center">匹配行尾.例如:hello$匹配以hello结尾的行</td></tr><tr><td>[]</td><td style="text-align:center">匹配中括号中指定的任意一个字符,只匹配一个字符</td></tr><tr><td>[^]</td><td style="text-align:center">匹配除中括号中的字符以外的任意一个字符,例:[^0-9]表示匹配任意一位非数字字符</td></tr><tr><td>\</td><td style="text-align:center">转义符,用于将特殊符号的含义取消</td></tr><tr><td>\{n\}</td><td style="text-align:center">表示其前面的字符恰好出现n次.例:[0-9]\{4\}匹配4位数字</td></tr><tr><td>\{n,\}</td><td style="text-align:center">表示其前面出现的字符不小于n次,例:[0-9]\{2,\}表示2位及以上的数字</td></tr><tr><td>\{n,m\}</td><td style="text-align:center">表示其前面出现的字符至少出现n次,最多出现m次,例:[a-z]\{2,4\}匹配2到4位的小写字母</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux常用压缩解压缩</title>
      <link href="/2018/05/20/Linux%E5%B8%B8%E7%94%A8%E5%8E%8B%E7%BC%A9%E8%A7%A3%E5%8E%8B%E7%BC%A9/"/>
      <url>/2018/05/20/Linux%E5%B8%B8%E7%94%A8%E5%8E%8B%E7%BC%A9%E8%A7%A3%E5%8E%8B%E7%BC%A9/</url>
      
        <content type="html"><![CDATA[<pre><code>摘要:  Linux下常用的压缩格式有:.zip .gz .bz2 .tar.gz .tar.bz2</code></pre><h4 id="1-zip格式压缩"><a href="#1-zip格式压缩" class="headerlink" title="1 .zip格式压缩"></a>1 .zip格式压缩</h4><p>压缩文件 <code>zip 压缩文件名 源文件</code></p><pre><code>zip test.zip ./test.txt #将当前目录的test.txt文档压缩为test.zip</code></pre><p>压缩目录 <code>zip -r 压缩文件名 源目录</code></p><pre><code>zip test1.zip ./test1 #将当前目录的test1目录压缩为test1.zip</code></pre><h4 id="2-zip格式解压缩"><a href="#2-zip格式解压缩" class="headerlink" title="2 .zip格式解压缩"></a>2 .zip格式解压缩</h4><p>解压文件  <code>unzip 压缩文件</code></p><pre><code>zip ./test1.zip #解压缩当前目录的test1.zip文件</code></pre><h4 id="3-gz格式压缩"><a href="#3-gz格式压缩" class="headerlink" title="3 .gz格式压缩"></a>3 .gz格式压缩</h4><p>压缩为.gz文件,源文件消失  <code>gzip 源文件</code></p><p>压缩为.gz文件,源文件保留  <code>gzip -c 源文件 &gt; 压缩文件</code></p><p>压缩目录下的所有子文件,但是不能压缩目录  <code>gzip -r 目录</code></p><h4 id="4-gz格式解压缩"><a href="#4-gz格式解压缩" class="headerlink" title="4 .gz格式解压缩"></a>4 .gz格式解压缩</h4><p>解压缩.gz文件  <code>gzip -d 压缩文件</code></p><p>解压缩.gz文件  <code>gunzip  压缩文件</code></p><h4 id="5-bz2格式压缩"><a href="#5-bz2格式压缩" class="headerlink" title="5 .bz2格式压缩"></a>5 .bz2格式压缩</h4><p>压缩为.bz2格式,不保留源文件  <code>bzip2 源文件</code></p><p>压缩为.bz2格式,保留源文件 <code>bzip2 -k 源文件</code></p><p>注:bzip2不能压缩目录</p><h4 id="6-bz2格式解压缩"><a href="#6-bz2格式解压缩" class="headerlink" title="6 .bz2格式解压缩"></a>6 .bz2格式解压缩</h4><p>解压缩.bz2文件,-k保留压缩文件  <code>bzip2 -d 压缩文件</code></p><p>解压缩.bz2文件,-k保留压缩文件  <code>bunzip2 压缩文件</code></p><h4 id="7-tar-gz格式压缩-先打包为tar-再压缩为-gz文件"><a href="#7-tar-gz格式压缩-先打包为tar-再压缩为-gz文件" class="headerlink" title="7 .tar.gz格式压缩(先打包为tar,再压缩为.gz文件)"></a>7 .tar.gz格式压缩(先打包为tar,再压缩为.gz文件)</h4><p>tar打包命令  <code>tar -cvf 打包文件名 源文件</code></p><p>选项: -c 打包; -v 现实过程; -f 指定打包后的文件名</p><p>tar -cvf test.tar ./test 将当前目录下test目录打包为tar文件</p><p>gzip test.tar  生成test.tar.gz文件</p><p>bzip2 test.tar 生成test.tar.bz2文件</p><p>上述过程繁琐,可以直接用  <code>tar -zcvf 压缩包名.tar.gz 源文件</code></p><h4 id="8-tar-gz格式解压缩-先用gzip解压文件-然后解打包"><a href="#8-tar-gz格式解压缩-先用gzip解压文件-然后解打包" class="headerlink" title="8 .tar.gz格式解压缩(先用gzip解压文件,然后解打包)"></a>8 .tar.gz格式解压缩(先用gzip解压文件,然后解打包)</h4><p>解打包命令  <code>tar -xvf 打包文件名</code></p><p>选项: -x 解打包</p><p>tar -vxf test.tar   解包text.tar文件</p><p>上述过程繁琐,可以直接用  <code>tar -zxvf 压缩包名.tar.gz</code>,<br>解压到指定目录可用-C选项指定目录 <code>tar -zxvf 压缩包名.tar.gz -C /tmp/</code></p><h4 id="9-tar-bz2格式压缩-先打包为tar-再压缩为-bz2文件"><a href="#9-tar-bz2格式压缩-先打包为tar-再压缩为-bz2文件" class="headerlink" title="9 .tar.bz2格式压缩(先打包为tar,再压缩为.bz2文件)"></a>9 .tar.bz2格式压缩(先打包为tar,再压缩为.bz2文件)</h4><p>tar打包命令  <code>tar -cvf 打包文件名 源文件</code></p><p>选项: -c 打包; -v 现实过程; -f 指定打包后的文件名</p><p>tar -cvf test.tar ./test 将当前目录下test目录打包为tar文件</p><p>bzip2 test.tar 生成test.tar.bz2文件</p><p>上述过程繁琐,可以直接用  <code>tar -jcvf 压缩包名.tar.bz2 源文件</code></p><h4 id="10-tar-bz2格式解压缩-先用bzip2解压文件-然后解打包"><a href="#10-tar-bz2格式解压缩-先用bzip2解压文件-然后解打包" class="headerlink" title="10 .tar.bz2格式解压缩(先用bzip2解压文件,然后解打包)"></a>10 .tar.bz2格式解压缩(先用bzip2解压文件,然后解打包)</h4><p>解打包命令  <code>tar -xvf 打包文件名</code></p><p>选项: -x 解打包</p><p>tar -vxf test.tar   解包text.tar文件</p><p>上述过程繁琐,可以直接用  <code>tar -jxvf 压缩包名.tar.bz2</code>,<br>解压到指定目录可用-C选项指定目录 <code>tar -jxvf 压缩包名.tar.bz2 -C /tmp/</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux下nginx部署配置多站点</title>
      <link href="/2018/05/13/linux%E4%B8%8Bnginx%E9%83%A8%E7%BD%B2%E9%85%8D%E7%BD%AE%E5%A4%9A%E7%AB%99%E7%82%B9/"/>
      <url>/2018/05/13/linux%E4%B8%8Bnginx%E9%83%A8%E7%BD%B2%E9%85%8D%E7%BD%AE%E5%A4%9A%E7%AB%99%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<pre><code>摘要:  有时候你想在一台服务器上为不同的域名运行不同的站点。  比如www.siteA.com作为博客，www.siteB.com作为论坛。你可以把两个域名的IP都解析到你的服务器上，  但是没法在Nginx的根目录里同时运行两个不同的网站.  这时可以在nginx上面配置部署多个站点(使用nginx虚拟目录),为你节省服务器费用.  假设你把博客放在”/home/user/www/blog”下，论坛放在”/home/user/www/forum”下。下面我们就开始进行配置:</code></pre><p>1.在Nginx配置目录下，创建一个”vhost”目录。本例假设Nginx是默认安装，配置目录在”/etc/nginx”</p><p><code>sudo mkdir /etc/nginx/vhost #创建保存站点配置文件的目录</code></p><p>2.创建siteA的配置文件</p><p>‘sudo vim /etc/nginx/vhost/siteA.conf #打开该文件(没有的话保存后会自动新建)’</p><p>在文件里面输入以下配置内容(具体的相关目录及location内容根据自己实际情况修改,下面只是nginx配置文件的基本结构,其实可以拷贝nginx自带的配置文件到vhost目录下,然后对文件内容进行修改):</p><pre><code>server {  listen 80; # 监听端口  server_name www.siteA.com siteA.com; # 站点域名  root /home/user/www/blog; # 站点根目录  index index.html index.htm index.php; # 默认导航页  #rewrite ^(.*) https://$host$1 permanent; #重定向到https  location / {    # WordPress固定链接URL重写    if (!-e $request_filename) {      rewrite (.*) /index.php;    }  }  location / {    # WordPress固定链接URL重写    if (!-e $request_filename) {      rewrite (.*) /index.php;    }  }  location ^~ /device/ {      proxy_pass http://127.0.0.1:8080;  }  location ^~ /upload/ {      root  /aaa/bbb;    expires   7d;  }}</code></pre><p>3.跟第二步一样,创建siteB的配置文件.(“server_name”和”root”目录的内容和siteA不同)</p><p>‘sudo vim /etc/nginx/vhost/siteB.conf #打开该文件(没有的话保存后会自动新建)’</p><p>在文件里面输入以下配置内容(具体的相关目录及location内容根据自己实际情况修改,下面只是nginx配置文件的基本结构,其实可以拷贝nginx自带的配置文件到vhost目录下,然后对文件内容进行修改):</p><pre><code>server {  listen 80; # 监听端口  server_name www.siteB.com siteB.com; # 站点域名  root /home/user/www/blog; # 站点根目录  index index.html index.htm index.php; # 默认导航页  #rewrite ^(.*) https://$host$1 permanent; #重定向到https  location / {    # WordPress固定链接URL重写    if (!-e $request_filename) {      rewrite (.*) /index.php;    }  }  location ^~ /device/ {      proxy_pass http://127.0.0.1:8080;  }  location ^~ /upload/ {      root  /aaa/bbb;    expires   7d;  }  # websocket地址  location ^~ /ws {        proxy_pass http://127.0.0.1:10002;    }}</code></pre><p>4.打开编辑nginx的配置文件</p><p><code>sudo vim /etc/nginx/nginx.conf</code></p><p>将我们第一步创建的虚拟目录的路径增加到nginx.conf文件中去,将下面的内容加入到”http {}”部分的末尾</p><pre><code>http {  ...  include /etc/nginx/vhost/*.conf;}</code></pre><p>5.重启nginx服务(注意:所有的配置文件修改保存后,先不急重新加载配置,先使用<code>nginx -t</code>测试下文件内容是否有错在进行重新加载配置操作)</p><p><code>sudo service nginx restart</code></p><p>6.访问<a href="http://www.siteA.com和www.siteB.com，你将发现浏览器会打开不同的站点" target="_blank" rel="noopener">www.siteA.com和www.siteB.com，你将发现浏览器会打开不同的站点</a></p><p>nginx禁止ip访问的小技巧:</p><p>假如你的Nginx根目录设在”/home/user/www”，你想阻止别人通过”<a href="http://IP地址/blog”或”http://IP地址/forum”来访问你的站点，最简单的方法就是禁止IP地址访问。方法如下：" target="_blank" rel="noopener">http://IP地址/blog”或”http://IP地址/forum”来访问你的站点，最简单的方法就是禁止IP地址访问。方法如下：</a></p><p>打开Nginx网站默认配置文件，记得先备份</p><p><code>sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/default_bak #备份原来的默认文件</code></p><p><code>sudo vim /etc/nginx/sites-available/default #编辑文件</code></p><p>将其所有内容删除，只留以下配置</p><pre><code>server {  listen 80 default_server;  server_name _;  return 404;}</code></pre><p>然后重启nginx或者<code>nginx -s reload</code>使配置文件生效,别人将无法通过IP地址访问网站了</p><p>如果你不想禁止IP地址访问整个目录，只是要防止别人通过IP访问你的博客和论坛。那就需要禁止”/blog”和”/forum”的目录访问</p><p>打开Nginx网站默认配置文件，同上面一样，记得先备份一下</p><p>在”server { }”节点的部分加上以下配置,然后重启nginx或者reload nginx配置即可.</p><pre><code>location ^~ /blog/ {  deny all;}location ^~ /forum/ {  deny all;}</code></pre><p>7.nginx常用的配置选项模板<br>    /etc/nginx/nginx.conf</p><pre><code>http {  sendfile on;  tcp_nopush on;  tcp_nodelay on;  keepalive_timeout 65;  types_hash_max_size 2048;  server_tokens off; # 关闭nginx版本标识  underscores_in_headers on; #自定义Header中含有下划线的情况 必须定义  gzip  on;  gzip_min_length 1k;  gzip_buffers 16 64k;  gzip_http_version 1.1;  gzip_comp_level 6;  gzip_types text/plain application/javascript application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png;  gzip_vary on;  gzip_disable &quot;MSIE [1-6]\.&quot;;  #proxy_connect_timeout 600;  #nginx跟后端服务器连接超时时间(代理连接超时)  proxy_buffer_size     32k;  #设置代理服务器（nginx）保存用户头信息的缓冲区大小  proxy_buffers         4 32k;#proxy_buffers缓冲区，网页平均在32k以下的话，这样设置  proxy_busy_buffers_size  64k;           #高负荷下缓冲大小（proxy_buffers*2）  proxy_temp_file_write_size  1024m;       #设定缓存文件夹大小，大于这个值，将从upstream服务器传  client_max_body_size 100M;  # 给后端服务器暴露获取客户端真实IP地址的头  proxy_set_header X-Real-IP $remote_addr;  proxy_set_header REMOTE-HOST $remote_addr;  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  # websocket 支持  proxy_http_version 1.1;  proxy_set_header Upgrade $http_upgrade;  proxy_set_header Connection &quot;upgrade&quot;;  proxy_read_timeout    600;  #连接成功后，后端服务器响应时间(代理接收超时)  proxy_send_timeout    600;  #后端服务器数据回传时间(代理发送超时)}</code></pre><p>8.站点配置文件样例,例如:/etc/nginx/vhost/a.conf</p><pre><code>server {  listen          80;  server_name     www.aaa.com  aaa.com;  root            /opt/pages/;  index           index.html index.htm;  # Cookie的HttpOnly属性，指示浏览器不要在除HTTP（和HTTPS)请求之外暴露Cookie。一个有HttpOnly属性的Cookie，是不可以通过例如调用JavaScript(引用document.cookie)这种非HTTP方式来访问。因此，也不可能通过跨域脚本（一种非常普通的攻击技术）来偷走这种Cookie。  add_header                  Set-Cookie &quot;HttpOnly&quot;;  # Cookie的Secure属性，意味着保持Cookie通信只限于加密传输，指示浏览器仅仅在通过安全/加密连接才能使用该Cookie。如果一个Web服务器从一个非安全连接里设置了一个带有secure属性的Cookie，当Cookie被发送到客户端时，它仍然能通过中间人攻击来拦截  add_header                  Set-Cookie &quot;Secure&quot;;  # X-Frame-Options HTTP 响应头是用来给浏览器指示允许一个页面可否在 &lt;frame&gt;, &lt;iframe&gt; 或者 &lt;object&gt; 中展现的标记。网站可以使用此功能，来确保自己网站的内容没有被嵌到别人的网站中去，也从而避免了点击劫持 (clickjacking) 的攻击。它有三个可选择项：(DENY：表示该页面不允许在 frame 中展示，即便是在相同域名的页面中嵌套也不允许；SAMEORIGIN：表示该页面可以在相同域名页面的 frame 中展示；ALLOW-FROM uri地址：表示该页面可以在指定来源的 frame 中展示；)  add_header                  X-Frame-Options &quot;SAMEORIGIN&quot;;  # 禁用OPTIONS TRACE不安全方法,屏蔽GET、POST、之外的HTTP方法  if ($request_method !~* GET|POST) {      return 403;  }  # 跨域配置  location / {    add_header Access-Control-Allow-Origin *;    add_header Access-Control-Allow-Methods &apos;GET, POST, OPTIONS&apos;;    add_header Access-Control-Allow-Headers &apos;DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization&apos;;    if ($request_method = &apos;OPTIONS&apos;) {      return 204;    }  }  # 转发以/api/开头的请求  location ^~ /api/ {    proxy_pass http://127.0.0.1:8080;  }  # 以/upload开头的请求  location ^~ /upload/ {    root  /opt/dir/;    expires   7d;  }}</code></pre><p>9.nginx负载均衡配置</p><p>  在http节点下配置服务器列表</p><pre><code>http {  # upstream模块：配置反向代理服务器组，Nginx会根据配置，将请求分发给组里的某一台服务器。serverGroup是服务器组的名称.  upstream serverGroup {    server 192.168.0.100:8080;    server 192.168.0.101:8080;  }  # serverGroup内部的server指令：配置处理请求的服务器IP或域名，端口可选，不配置默认使用80端口。通过上面的配置(默认的是轮询策略,把每个请求逐一分配到不同的server，如果分配到的server不可用，则分配到下一个，直到可用)，Nginx默认将请求依次分配给100，101来处理，可以通过修改下面这些参数来改变默认的分配策略：  1.weight权重,默认为1，将请求平均分配给每台server.值越大，则被访问的概率越大.下面标示101访问数量是100的2倍  upstream serverGroup {    server 192.168.0.100:8080 weight=1;    server 192.168.0.101:8080 weight=2 max_fails=3 fail_timeout=15;    server 192.168.0.102:8080 down; #down 表示当前服务器不参与负载均衡，也就是说不会被访问到    server 192.168.0.103:8080 backup; #backup 表示备份机，所有服务器挂了之后才会生效  }  max_fails:默认为1。某台Server允许请求失败的次数，超过最大次数后，在fail_timeout时间内，新的请求将不会分配给这台机器。如果设置为0，Nginx会将这台Server置为永久无效状态，然后将请求发给定义了proxy_next_upstream fastcgi_next_upstream, uwsgi_next_upstream, scgi_next_upstream, and memcached_next_upstream指令来处理这次错误的请求  fail_timeout:默认为10秒。某台Server达到max_fails次失败请求后，在fail_timeout期间内，nginx会认为这台Server暂时不可用，不会将请求分配给它  2.最少连接,把请求分配到连接数最少的server  upstream serverGroup {    least_conn;    server 192.168.0.100:8080;    server 192.168.0.101:8080;  }  3.ip_hash,根据访问客户端ip的hash值分配，这样同一客户端的请求都会被分配到同一个server上，如果牵扯到session的问题，用这个是最好的选择  upstream serverGroup {    ip_hash;    server 192.168.0.100:8080;    server 192.168.0.101:8080;  }}</code></pre><p>  在server节点下配置proxy_pass</p><pre><code>server {    listen  80;    server_name serverGroup;    location / {      proxy_pass   http://serverGroup; # 表示将所有请求转发到tomcats服务器组中配置的某一台服务器上    }}</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux下安装maven</title>
      <link href="/2018/05/13/Linux%E4%B8%8B%E5%AE%89%E8%A3%85maven/"/>
      <url>/2018/05/13/Linux%E4%B8%8B%E5%AE%89%E8%A3%85maven/</url>
      
        <content type="html"><![CDATA[<pre><code>摘要:  Linux系统下离线安装maven</code></pre><p>1.在Apache官方网站下载对应系统的maven包然后解压maven</p><p>2.配置环境变量.(配置到当前用户的环境变量上)</p><p><code>sudo  vim ~/.bashrc #用vim打开当前用户的环境变量配置文件</code></p><p>在.bashrc文件底部加入以下内容,然后保存退出.(M2_HOME代表解压后的maven目录)</p><pre><code>export M2_HOME=/home/user/apache-maven-3.3.9export PATH=${M2_HOME}/bin:$PATH</code></pre><p>3.执行以下命令使刚刚的配置生效</p><pre><code>`source ~/.bashrc`</code></pre><p>4.验证安装结果,执行下列命令,如果一切无误,会正常出现对应的maven版本信息</p><pre><code>`mvn -v`</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> java </tag>
            
            <tag> maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux离线安装oracle JDK</title>
      <link href="/2018/05/13/JDK/"/>
      <url>/2018/05/13/JDK/</url>
      
        <content type="html"><![CDATA[<pre><code>摘要:  本文是在deepin linux(基于debian发行版)系统环境下,debian,ubuntu以及其他debian衍生版同理适用</code></pre><p>如果电脑处于联网状态,那么可以使用apt包管理器在线安装,可使用以下命令在线安装:</p><p><code>sudo apt update #更新</code></p><p><code>sudo apt install oracle-java8 #安装</code></p><p> 下面重点介绍离线安装官网下载安装包的方式:</p><p> 1.oracle官网下载Linux对应的tar.gz安装包</p><p> 2.进入到存放安装包的目录下,执行以下命令将安装包的内容解压到在指定目录(/usr/local/java/文件夹自己事先建好)</p><p> <code>sudo tar zxvf ./xxxx.tar.gz  -C /usr/local/java</code></p><p>3.查看第二步是否成功,如果有/usr/local/java/下有jdk对应的目录结构,则表示成功</p><p><code>ls -anl /usr/local/java/</code></p><p>4.配置环境变量(此处配置到当前用户的环境变量上)</p><p><code>sudo  vim ~/.bashrc #用vim打开当前用户的环境变量配置文件</code></p><p>在.bashrc文件底部加入以下内容,然后保存退出</p><pre><code>export JAVA_HOME=/usr/local/java/java-8u5_xxxexport JRE_HOME=${JAVA_HOME}/jre   export CLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/lib   export PATH=${JAVA_HOME}/bin:$PATHunset _JAVA_OPTIONS</code></pre><p>5.执行以下命令使刚刚的配置生效</p><p><code>source ~/.bashrc</code></p><p>6.验证安装结果,执行下列命令,如果一切无误,会正常出现对应的java版本信息</p><p><code>java -version</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> java </tag>
            
            <tag> jdk </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux增加使用文件代替swap分区分方法</title>
      <link href="/2018/05/13/Linux%E5%A2%9E%E5%8A%A0%E4%BD%BF%E7%94%A8%E6%96%87%E4%BB%B6%E4%BB%A3%E6%9B%BFswap%E5%88%86%E5%8C%BA%E5%88%86%E6%96%B9%E6%B3%95/"/>
      <url>/2018/05/13/Linux%E5%A2%9E%E5%8A%A0%E4%BD%BF%E7%94%A8%E6%96%87%E4%BB%B6%E4%BB%A3%E6%9B%BFswap%E5%88%86%E5%8C%BA%E5%88%86%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<pre><code>摘要:  在安装Linux系统的时候未对系统进行swap(交换分区),后续进入系统  可以采用新建文件的方式来代替swap分区.  以下所执行的系统环境是:deepin linux(基于debian发行版),  按理在Ubuntu,debian上也是可以的.</code></pre><p>注意:执行以下命令时,全部采用root账户的权限</p><p>1.创建要作为swap分区的文件:增加1GB大小的交换分区，则命令写法如下，其中的count等于想要的块的数量（bs*count=文件大小）</p><p><code>sudo dd if=/dev/zero of=/swapfile bs=1M count=1024</code></p><p>2.格式化为交换分区文件,建立swap的文件系统</p><p><code>sudo mkswap /swapfile</code></p><p>3.启用交换分区文件</p><p><code>sudo swapon /swapfile</code></p><p>4.使系统开机时自启用，在文件/etc/fstab中添加一行(可使用vim打开文件进行编辑)：</p><p><code>/swapfile swap swap defaults 0 0</code></p><p>5.验证结果,执行free 命令查看是否有交换分区</p><p><code>free -m</code></p><p>注:如果想移除swap分区文件,执行以下命令:</p><p><code>sudo swapoff /swapfile &amp;&amp; sudo rm /swapfile</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> swap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL字段值默认不区分大小写问题</title>
      <link href="/2018/05/13/MySQL%E5%AD%97%E6%AE%B5%E5%80%BC%E9%BB%98%E8%AE%A4%E4%B8%8D%E5%8C%BA%E5%88%86%E5%A4%A7%E5%B0%8F%E5%86%99%E9%97%AE%E9%A2%98/"/>
      <url>/2018/05/13/MySQL%E5%AD%97%E6%AE%B5%E5%80%BC%E9%BB%98%E8%AE%A4%E4%B8%8D%E5%8C%BA%E5%88%86%E5%A4%A7%E5%B0%8F%E5%86%99%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<pre><code>摘要：  mysql的字段值是默认不区分大小写的,但是用户在登录账户的时候严格区分大小写的,所以解决如下:</code></pre><p>1 .在不改变表任何结构的情况下,可以直接在查询条件后面的字段名或者字段值作为binary()函数的参数即可,如下:</p><p><code>select * from table_name t where binary(t.field) = &#39;Abc&#39;;</code></p><p>2 .在建表的时候在字段后面加上binary,或者用alter语句来改变字段类型,只需要加上binary</p><pre><code>`mysql&gt; create table t_user(-&gt; username varchar(20) binary-&gt; );`</code></pre><p>对已有的表进行alert</p><p><code>alter table table_name modify field varchar(20) binary</code></p><p>注:table_name换成具体对应的表名称.field换成具体对应的表的字段</p>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux下离线安装nodejs</title>
      <link href="/2018/05/12/Linux%E4%B8%8B%E5%AE%89%E8%A3%85nodejs/"/>
      <url>/2018/05/12/Linux%E4%B8%8B%E5%AE%89%E8%A3%85nodejs/</url>
      
        <content type="html"><![CDATA[<h5 id="Linux下离线安装nodejs步骤"><a href="#Linux下离线安装nodejs步骤" class="headerlink" title="Linux下离线安装nodejs步骤:"></a>Linux下离线安装nodejs步骤:</h5><hr><p>1.在官网下载Linux版本的nodejs安装包,然后解压并且移动到/usr/local/目录,具体目录可随意指定</p><p><code>sudo tar -xvJf ./node-v8.9.3-linux-x64.tar.xz -C /usr/local/</code></p><p>2.配置环境变量，编辑～/.bashrc文件(当前用户的环境变量配置)</p><p><code>export NODE_HOME=/opt/node</code></p><p><code>export PATH=$PATH:$NODE_HOME/bin</code></p><p><code>export NODE_PATH=$NODE_HOME/lib/node_modules</code></p><p>3.使配置生效,执行source命令</p><p><code>source ~/.bashrc</code></p><p>4.执行如下命令校验配置是否生效</p><p><code>node -v</code></p><p><code>npm -v</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> nodejs </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
